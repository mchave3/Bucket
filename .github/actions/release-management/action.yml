name: 'üöÄ Release Management'
description: 'Create git tags, generate changelog and publish GitHub release'

inputs:
  app-name:
    description: 'Application name'
    required: true
  app-version:
    description: 'Application version'
    required: true
  release-name:
    description: 'Release name (will be prefixed to version)'
    required: false
    default: 'Release'
  is-prerelease:
    description: 'Mark as pre-release'
    required: false
    default: 'false'
  make-latest:
    description: 'Mark as latest release'
    required: false
    default: 'true'
  skip-if-exists:
    description: 'Skip if release already exists'
    required: false
    default: 'true'
  artifacts-pattern:
    description: 'Pattern for artifacts to include'
    required: false
    default: '*.zip'
  github-token:
    description: 'GitHub token for API access'
    required: true
  generate-release-notes:
    description: 'Auto-generate release notes from commits'
    required: false
    default: 'true'
  target-commitish:
    description: 'Commitish value for tag creation (defaults to current branch)'
    required: false
    default: ''

outputs:
  release-url:
    description: 'URL of the created release'
    value: ${{ steps.publish-release.outputs.url }}
  tag-name:
    description: 'Name of the created tag'
    value: ${{ inputs.app-version }}
  release-id:
    description: 'ID of the created release'
    value: ${{ steps.publish-release.outputs.id }}
  upload-url:
    description: 'URL for uploading additional assets'
    value: ${{ steps.publish-release.outputs.upload_url }}
  assets:
    description: 'JSON array of uploaded assets information'
    value: ${{ steps.publish-release.outputs.assets }}

runs:
  using: 'composite'
  steps:
    - name: üìã Release Information
      id: release-info
      shell: bash
      run: |
        TAG_NAME="${{ inputs.app-version }}"
        RELEASE_TITLE="${{ inputs.release-name }} ${{ inputs.app-version }}"

        echo "üöÄ Release Information:"
        echo "  ‚Ä¢ Tag Name: $TAG_NAME"
        echo "  ‚Ä¢ Release Title: $RELEASE_TITLE"
        echo "  ‚Ä¢ Pre-release: ${{ inputs.is-prerelease }}"
        echo "  ‚Ä¢ Make Latest: ${{ inputs.make-latest }}"
        echo "  ‚Ä¢ Skip if exists: ${{ inputs.skip-if-exists }}"
        echo "  ‚Ä¢ Auto-generate notes: ${{ inputs.generate-release-notes }}"

        echo "tag-name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "release-title=$RELEASE_TITLE" >> $GITHUB_OUTPUT

    - name: üîç Check if Release Already Exists
      id: check-release
      if: inputs.skip-if-exists == 'true'
      shell: bash
      run: |
        echo "üîç Checking if release ${{ inputs.app-version }} already exists..."

        if gh release view "${{ inputs.app-version }}" --repo "${{ github.repository }}" > /dev/null 2>&1; then
          echo "‚è≠Ô∏è Release ${{ inputs.app-version }} already exists - skipping creation"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Release ${{ inputs.app-version }} does not exist - proceeding with creation"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    - name: üè∑Ô∏è Create Git Tag
      if: steps.check-release.outputs.exists != 'true'
      shell: bash
      run: |
        echo "üè∑Ô∏è Creating git tag for release..."

        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"

        TAG_NAME="${{ inputs.app-version }}"
        echo "üìå Creating tag: $TAG_NAME"

        # Check if tag already exists locally or remotely
        if git tag -l "$TAG_NAME" | grep -q "^$TAG_NAME$"; then
          echo "‚ö†Ô∏è Tag $TAG_NAME already exists locally"
        elif git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
          echo "‚ö†Ô∏è Tag $TAG_NAME already exists on remote"
        else
          # Create and push the tag
          if [ -n "${{ inputs.target-commitish }}" ]; then
            git tag "$TAG_NAME" "${{ inputs.target-commitish }}"
            echo "‚úÖ Tag $TAG_NAME created at commit ${{ inputs.target-commitish }}"
          else
            git tag "$TAG_NAME"
            echo "‚úÖ Tag $TAG_NAME created at current HEAD"
          fi

          if git push origin "$TAG_NAME"; then
            echo "‚úÖ Tag $TAG_NAME pushed successfully to remote"
          else
            echo "‚ùå Failed to push tag $TAG_NAME"
            exit 1
          fi
        fi

    - name: ÔøΩ Validate Available Artifacts
      id: validate-artifacts
      if: steps.check-release.outputs.exists != 'true'
      shell: bash
      run: |
        echo "ÔøΩ Validating artifacts matching pattern '${{ inputs.artifacts-pattern }}'..."

        # Create array to store artifact files
        artifacts=()

        # Find all matching files
        for file in ${{ inputs.artifacts-pattern }}; do
          if [ -f "$file" ]; then
            artifacts+=("$file")
          fi
        done

        # Check if we found any artifacts
        if [ ${#artifacts[@]} -eq 0 ]; then
          echo "‚ö†Ô∏è No artifacts found matching pattern '${{ inputs.artifacts-pattern }}'"
          echo "files=" >> $GITHUB_OUTPUT
          echo "count=0" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Found ${#artifacts[@]} artifact(s):"

          total_size=0
          for file in "${artifacts[@]}"; do
            size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
            size_mb=$((size / 1048576))
            echo "  ‚Ä¢ $file ($(du -h "$file" | cut -f1))"

            # Validate file integrity for ZIP files
            if [[ "$file" == *.zip ]]; then
              if ! unzip -t "$file" > /dev/null 2>&1; then
                echo "‚ùå Artifact $file is corrupted (ZIP integrity check failed)"
                exit 1
              fi
            fi

            total_size=$((total_size + size))
          done

          total_size_mb=$((total_size / 1048576))
          echo "üìä Total artifacts size: ${total_size_mb}MB"

          # Convert array to newline-separated string for action-gh-release
          printf -v files_list '%s\n' "${artifacts[@]}"
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$files_list" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "count=${#artifacts[@]}" >> $GITHUB_OUTPUT
        fi

    - name: üöÄ Publish GitHub Release
      id: publish-release
      if: steps.check-release.outputs.exists != 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ inputs.app-version }}
        name: ${{ steps.release-info.outputs.release-title }}
        files: ${{ steps.validate-artifacts.outputs.files }}
        prerelease: ${{ inputs.is-prerelease }}
        make_latest: ${{ inputs.make-latest }}
        generate_release_notes: ${{ inputs.generate-release-notes }}
        target_commitish: ${{ inputs.target-commitish }}
        fail_on_unmatched_files: true
        token: ${{ inputs.github-token }}

    - name: ‚úÖ Release Summary
      if: always()
      shell: bash
      run: |
        TAG_NAME="${{ inputs.app-version }}"
        RELEASE_TITLE="${{ steps.release-info.outputs.release-title }}"

        echo "‚úÖ Release Management Summary:"
        echo "  ‚Ä¢ Tag: $TAG_NAME"
        echo "  ‚Ä¢ Release Title: $RELEASE_TITLE"

        if [ "${{ steps.check-release.outputs.exists }}" = "true" ]; then
          echo "  ‚Ä¢ Status: ‚è≠Ô∏è Skipped (release already exists)"
          echo "  ‚Ä¢ Existing Release URL: https://github.com/${{ github.repository }}/releases/tag/$TAG_NAME"
        elif [ "${{ steps.publish-release.outcome }}" = "success" ]; then
          echo "  ‚Ä¢ Status: ‚úÖ Successfully published"
          echo "  ‚Ä¢ Release URL: ${{ steps.publish-release.outputs.url }}"
          echo "  ‚Ä¢ Release ID: ${{ steps.publish-release.outputs.id }}"
          echo "  ‚Ä¢ Upload URL: ${{ steps.publish-release.outputs.upload_url }}"
          echo "  ‚Ä¢ Assets uploaded: ${{ steps.validate-artifacts.outputs.count }}"
          echo "  ‚Ä¢ Pre-release: ${{ inputs.is-prerelease }}"
          echo "  ‚Ä¢ Make Latest: ${{ inputs.make-latest }}"
          echo "üéâ Release published successfully!"
        else
          echo "  ‚Ä¢ Status: ‚ùå Failed"
          echo "üí• Release publication failed - check previous steps for errors"
        fi
