name: 'Release Management'
description: 'Create GitHub release with artifacts'
inputs:
  version:
    description: 'Version for the release'
    required: true
  is-prerelease:
    description: 'Whether this is a pre-release'
    required: false
    default: 'false'
  release-notes:
    description: 'Release notes content'
    required: false
    default: ''
  artifacts-path:
    description: 'Path to artifacts to upload'
    required: false
    default: 'artifacts'
  github-token:
    description: 'GitHub token for creating release'
    required: true

outputs:
  release-url:
    description: 'URL of the created release'
    value: ${{ steps.create-release.outputs.upload_url }}
  release-id:
    description: 'ID of the created release'
    value: ${{ steps.create-release.outputs.id }}

runs:
  using: 'composite'
  steps:
    - name: Generate release notes
      id: release-notes
      shell: pwsh
      run: |
        Write-Host "=== Generating Release Notes ===" -ForegroundColor Cyan

        $version = "${{ inputs.version }}"
        $isPrerelease = "${{ inputs.is-prerelease }}"
        $customNotes = @'
        ${{ inputs.release-notes }}
        '@

        # Build release notes
        $notes = @"
        # Bucket $version

        $(if ($isPrerelease -eq "true") { "**This is a pre-release build (Nightly)**" } else { "**This is a stable release**" })

        ## üì¶ Downloads

        ### Installers (MSI)
        - ``Bucket-$version-x64.msi`` - For 64-bit Windows systems
        - ``Bucket-$version-x86.msi`` - For 32-bit Windows systems
        - ``Bucket-$version-arm64.msi`` - For ARM64 Windows systems

        ### Portable Archives (ZIP)
        - ``Bucket-$version-x64.zip`` - Portable version for 64-bit Windows
        - ``Bucket-$version-x86.zip`` - Portable version for 32-bit Windows
        - ``Bucket-$version-arm64.zip`` - Portable version for ARM64 Windows

        ## üìã System Requirements
        - Windows 10 version 1809 or higher
        - Windows 11
        - .NET 9 Runtime (included in installer)

        ## üöÄ What's New
        $customNotes

        ## üìù Installation Instructions

        ### Using MSI Installer (Recommended)
        1. Download the appropriate MSI file for your system architecture
        2. Double-click the MSI file to start the installation
        3. Follow the installation wizard

        ### Using Portable Version
        1. Download the appropriate ZIP file for your system architecture
        2. Extract the ZIP file to your desired location
        3. Run ``Bucket.App.exe``

        ## üîß Verify Your System Architecture
        To check your Windows architecture, run this in PowerShell:
        ``[System.Environment]::Is64BitOperatingSystem``
        - ``True`` = Use x64 version
        - ``False`` = Use x86 version

        For ARM devices, you'll know if you have an ARM-based system (Surface Pro X, etc.)

        ---

        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$(if ($isPrerelease -eq "true") { "dev" } else { "main" })...v$version
        "@

        # Save to file for the release
        $notes | Out-File -FilePath "release-notes.md" -Encoding UTF8
        Write-Host "Release notes generated" -ForegroundColor Green

    - name: Create GitHub Release
      id: create-release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ inputs.version }}
        name: Bucket ${{ inputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ inputs.is-prerelease }}
        token: ${{ inputs.github-token }}
        generate_release_notes: true

    - name: Upload ZIP packages
      shell: pwsh
      run: |
        Write-Host "=== Uploading ZIP packages ===" -ForegroundColor Cyan

        $zipPath = "${{ inputs.artifacts-path }}/zip"
        if (Test-Path $zipPath) {
          $zipFiles = Get-ChildItem -Path $zipPath -Filter "*.zip"

          foreach ($zip in $zipFiles) {
            Write-Host "Uploading $($zip.Name)..." -ForegroundColor Yellow

            gh release upload "v${{ inputs.version }}" `
              "$($zip.FullName)" `
              --clobber

            if ($LASTEXITCODE -eq 0) {
              Write-Host "Uploaded: $($zip.Name)" -ForegroundColor Green
            } else {
              Write-Warning "Failed to upload: $($zip.Name)"
            }
          }
        } else {
          Write-Warning "No ZIP packages found at: $zipPath"
        }
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    - name: Upload MSI installers
      shell: pwsh
      run: |
        Write-Host "=== Uploading MSI installers ===" -ForegroundColor Cyan

        $installersPath = "${{ inputs.artifacts-path }}/installers"
        if (Test-Path $installersPath) {
          $msiFiles = Get-ChildItem -Path $installersPath -Filter "*.msi"

          foreach ($msi in $msiFiles) {
            Write-Host "Uploading $($msi.Name)..." -ForegroundColor Yellow

            gh release upload "v${{ inputs.version }}" `
              "$($msi.FullName)" `
              --clobber

            if ($LASTEXITCODE -eq 0) {
              Write-Host "Uploaded: $($msi.Name)" -ForegroundColor Green
            } else {
              Write-Warning "Failed to upload: $($msi.Name)"
            }
          }
        } else {
          Write-Warning "No MSI installers found at: $installersPath"
        }
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    - name: Generate job summary
      shell: pwsh
      run: |
        Write-Host "=== Generating Job Summary ===" -ForegroundColor Cyan

        $summary = @"
        # üöÄ Release Published: Bucket ${{ inputs.version }}

        ## üì¶ Release Information
        - **Version**: ``${{ inputs.version }}``
        - **Type**: $(if ("${{ inputs.is-prerelease }}" -eq "true") { "Pre-release (Nightly)" } else { "Stable Release" })
        - **Release URL**: https://github.com/${{ github.repository }}/releases/tag/v${{ inputs.version }}

        ## üìã Artifacts

        ### ZIP Packages
        "@

        $zipPath = "${{ inputs.artifacts-path }}/zip"
        if (Test-Path $zipPath) {
          Get-ChildItem -Path $zipPath -Filter "*.zip" | ForEach-Object {
            $summary += "`n- ``$($_.Name)`` ($('{0:N2} MB' -f ($_.Length / 1MB)))"
          }
        }

        $summary += "`n`n### MSI Installers"

        $installersPath = "${{ inputs.artifacts-path }}/installers"
        if (Test-Path $installersPath) {
          Get-ChildItem -Path $installersPath -Filter "*.msi" | ForEach-Object {
            $summary += "`n- ``$($_.Name)`` ($('{0:N2} MB' -f ($_.Length / 1MB)))"
          }
        }

        $summary += @"


        ## ‚úÖ Release Complete
        All artifacts have been successfully uploaded to the GitHub release.
        "@

        $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8 -Append
        Write-Host "Job summary generated" -ForegroundColor Green
