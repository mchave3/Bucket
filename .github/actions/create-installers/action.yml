name: 'Create Installers'
description: 'Generate MSI installers using Advanced Installer for all architectures'
inputs:
  version:
    description: 'Version for the installers'
    required: true
  configuration:
    description: 'Build configuration'
    required: false
    default: 'Release'

outputs:
  installers-path:
    description: 'Path to generated installers'
    value: ${{ steps.paths.outputs.installers }}

runs:
  using: 'composite'
  steps:
    - name: Setup paths
      id: paths
      shell: pwsh
      run: |
        $installersPath = "artifacts/installers"
        New-Item -ItemType Directory -Force -Path $installersPath | Out-Null
        echo "installers=$installersPath" >> $env:GITHUB_OUTPUT

    - name: Update version in Advanced Installer projects
      shell: pwsh
      run: |
        Write-Host "Updating version in Advanced Installer projects to ${{ inputs.version }}..." -ForegroundColor Cyan

        # Extract clean version (remove pre-release suffix)
        $versionBase = "${{ inputs.version }}" -replace '-.*$', ''
        Write-Host "Base version: $versionBase"

        # Update each .aip file
        $aipFiles = @(
          "setup/Bucket.Setup_x64/Bucket.Setup_x64.aip",
          "setup/Bucket.Setup_x86/Bucket.Setup_x86.aip",
          "setup/Bucket.Setup_arm64/Bucket.Setup_arm64.aip"
        )

        foreach ($aipFile in $aipFiles) {
          if (Test-Path $aipFile) {
            Write-Host "Updating $aipFile..."

            # Use Advanced Installer COM to update version
            $aiPath = $aipFile
            $aiCom = New-Object -ComObject AdvancedInstaller.AdvancedInstallerCOM
            $project = $aiCom.OpenProject($aiPath)
            $project.ProductDetails.Version = $versionBase
            $project.Save()
            $project.Close()

            Write-Host "Updated version in $aipFile" -ForegroundColor Green
          } else {
            Write-Warning "AIP file not found: $aipFile"
          }
        }

    - name: Build x64 Installer
      shell: pwsh
      run: |
        Write-Host "=== Building x64 Installer ===" -ForegroundColor Green

        $setupProject = "setup/Bucket.Setup_x64/Bucket.Setup_x64.aiproj"

        if (Test-Path $setupProject) {
          # First, clean any existing cache and output
          $cacheDir = "setup/Bucket.Setup_x64/Bucket.Setup_x64-cache"
          $setupFilesDir = "setup/Bucket.Setup_x64/Bucket.Setup_x64-SetupFiles"

          if (Test-Path $cacheDir) {
            Remove-Item -Path $cacheDir -Recurse -Force
          }
          if (Test-Path $setupFilesDir) {
            Remove-Item -Path $setupFilesDir -Recurse -Force
          }

          # Build the installer
          msbuild $setupProject `
            /p:Configuration=${{ inputs.configuration }} `
            /p:Platform=x64 `
            /t:Rebuild `
            /v:minimal

          if ($LASTEXITCODE -ne 0) {
            Write-Error "x64 installer build failed!"
            exit 1
          }

          # Copy MSI to artifacts
          $msiSource = "setup/Bucket.Setup_x64/Bucket.Setup_x64-SetupFiles/Bucket.Setup_x64.msi"
          if (Test-Path $msiSource) {
            $version = "${{ inputs.version }}"
            $msiDest = "artifacts/installers/Bucket-$version-x64.msi"
            Copy-Item -Path $msiSource -Destination $msiDest -Force
            Write-Host "Created: $msiDest" -ForegroundColor Green
          } else {
            Write-Warning "MSI not found: $msiSource"
          }
        } else {
          Write-Warning "Setup project not found: $setupProject"
        }

    - name: Build x86 Installer
      shell: pwsh
      run: |
        Write-Host "=== Building x86 Installer ===" -ForegroundColor Green

        $setupProject = "setup/Bucket.Setup_x86/Bucket.Setup_x86.aiproj"

        if (Test-Path $setupProject) {
          # First, clean any existing cache and output
          $cacheDir = "setup/Bucket.Setup_x86/Bucket.Setup_x86-cache"
          $setupFilesDir = "setup/Bucket.Setup_x86/Bucket.Setup_x86-SetupFiles"

          if (Test-Path $cacheDir) {
            Remove-Item -Path $cacheDir -Recurse -Force
          }
          if (Test-Path $setupFilesDir) {
            Remove-Item -Path $setupFilesDir -Recurse -Force
          }

          # Build the installer
          msbuild $setupProject `
            /p:Configuration=${{ inputs.configuration }} `
            /p:Platform=x86 `
            /t:Rebuild `
            /v:minimal

          if ($LASTEXITCODE -ne 0) {
            Write-Error "x86 installer build failed!"
            exit 1
          }

          # Copy MSI to artifacts
          $msiSource = "setup/Bucket.Setup_x86/Bucket.Setup_x86-SetupFiles/Bucket.Setup_x86.msi"
          if (Test-Path $msiSource) {
            $version = "${{ inputs.version }}"
            $msiDest = "artifacts/installers/Bucket-$version-x86.msi"
            Copy-Item -Path $msiSource -Destination $msiDest -Force
            Write-Host "Created: $msiDest" -ForegroundColor Green
          } else {
            Write-Warning "MSI not found: $msiSource"
          }
        } else {
          Write-Warning "Setup project not found: $setupProject"
        }

    - name: Build ARM64 Installer
      shell: pwsh
      run: |
        Write-Host "=== Building ARM64 Installer ===" -ForegroundColor Green

        $setupProject = "setup/Bucket.Setup_arm64/Bucket.Setup_arm64.aiproj"

        if (Test-Path $setupProject) {
          # First, clean any existing cache and output
          $cacheDir = "setup/Bucket.Setup_arm64/Bucket.Setup_arm64-cache"
          $setupFilesDir = "setup/Bucket.Setup_arm64/Bucket.Setup_arm64-SetupFiles"

          if (Test-Path $cacheDir) {
            Remove-Item -Path $cacheDir -Recurse -Force
          }
          if (Test-Path $setupFilesDir) {
            Remove-Item -Path $setupFilesDir -Recurse -Force
          }

          # Build the installer
          msbuild $setupProject `
            /p:Configuration=${{ inputs.configuration }} `
            /p:Platform=ARM64 `
            /t:Rebuild `
            /v:minimal

          if ($LASTEXITCODE -ne 0) {
            Write-Error "ARM64 installer build failed!"
            exit 1
          }

          # Copy MSI to artifacts
          $msiSource = "setup/Bucket.Setup_arm64/Bucket.Setup_arm64-SetupFiles/Bucket.Setup_arm64.msi"
          if (Test-Path $msiSource) {
            $version = "${{ inputs.version }}"
            $msiDest = "artifacts/installers/Bucket-$version-arm64.msi"
            Copy-Item -Path $msiSource -Destination $msiDest -Force
            Write-Host "Created: $msiDest" -ForegroundColor Green
          } else {
            Write-Warning "MSI not found: $msiSource"
          }
        } else {
          Write-Warning "Setup project not found: $setupProject"
        }

    - name: List generated installers
      shell: pwsh
      run: |
        Write-Host "=== Generated Installers ===" -ForegroundColor Cyan
        $installersPath = "artifacts/installers"

        if (Test-Path $installersPath) {
          Get-ChildItem -Path $installersPath -Filter "*.msi" | ForEach-Object {
            Write-Host "  - $($_.Name) ($('{0:N2} MB' -f ($_.Length / 1MB)))" -ForegroundColor Green
          }
        }

    - name: Upload installer artifacts
      uses: actions/upload-artifact@v4
      with:
        name: installer-artifacts
        path: artifacts/installers/
        retention-days: 7
