name: 'Create Installers'
description: 'Generate MSI installers using WiX Toolset for all architectures'
inputs:
  version:
    description: 'Version for the installers'
    required: true
  configuration:
    description: 'Build configuration'
    required: false
    default: 'Release'

outputs:
  installers-path:
    description: 'Path to generated installers'
    value: ${{ steps.paths.outputs.installers }}

runs:
  using: 'composite'
  steps:
    - name: Setup paths
      id: paths
      shell: pwsh
      run: |
        $installersPath = "artifacts/installers"
        New-Item -ItemType Directory -Force -Path $installersPath | Out-Null
        echo "installers=$installersPath" >> $env:GITHUB_OUTPUT
        Write-Host "Installers will be generated in: $installersPath" -ForegroundColor Cyan

    - name: Install WiX Toolset 6
      shell: pwsh
      run: |
        Write-Host "=== Installing WiX Toolset 6 ===" -ForegroundColor Cyan

        # Install WiX 6 as a global tool
        dotnet tool install --global wix --version 6.0.2

        if ($LASTEXITCODE -eq 0) {
          Write-Host "‚úÖ WiX Toolset 6.0.2 installed successfully" -ForegroundColor Green
        } else {
          Write-Error "‚ùå Failed to install WiX Toolset 6"
          exit 1
        }

        # Verify installation
        wix --version
        Write-Host "WiX Toolset 6 is ready!" -ForegroundColor Green

    - name: Setup .NET and MSBuild
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Ensure artifacts directory exists
      shell: pwsh
      run: |
        Write-Host "Creating artifacts directory structure..." -ForegroundColor Cyan

        $directories = @(
          "artifacts/installers",
          "artifacts/publish/win-x64",
          "artifacts/publish/win-x86",
          "artifacts/publish/win-arm64"
        )

        foreach ($dir in $directories) {
          New-Item -ItemType Directory -Force -Path $dir | Out-Null
          Write-Host "‚úÖ Created: $dir" -ForegroundColor Green
        }

    - name: Verify published applications for all platforms
      shell: pwsh
      run: |
        Write-Host "=== Verifying Published Applications for All Platforms ===" -ForegroundColor Cyan
        Write-Host "üîç Checking that applications were already published by build-and-package action" -ForegroundColor Green

        $platforms = @(
          @{ Name = "x64"; RID = "win-x64" },
          @{ Name = "x86"; RID = "win-x86" },
          @{ Name = "ARM64"; RID = "win-arm64" }
        )

        foreach ($platform in $platforms) {
          Write-Host "Verifying publish directory for $($platform.Name)..." -ForegroundColor Yellow

          $publishPath = "src/Bucket.App/bin/$($platform.Name)/${{ inputs.configuration }}/net9.0-windows10.0.26100/$($platform.RID)/publish"

          if (Test-Path $publishPath) {
            $files = Get-ChildItem -Path $publishPath -Recurse -File
            Write-Host "‚úÖ Found $($files.Count) files for $($platform.Name) in $publishPath" -ForegroundColor Green

            # Show key files for verification
            $keyFiles = $files | Where-Object { $_.Extension -in @('.exe', '.dll') } | Select-Object -First 3
            $keyFiles | ForEach-Object {
              Write-Host "   üî∏ $($_.Name)" -ForegroundColor Gray
            }
            if ($files.Count -gt 3) {
              Write-Host "   ... and $($files.Count - 3) more files" -ForegroundColor Gray
            }
          } else {
            Write-Error "‚ùå Publish directory not found: $publishPath"
            Write-Host "This suggests the build-and-package action did not complete successfully." -ForegroundColor Red
            exit 1
          }
        }

    - name: Build WiX Setup Projects for each platform (with platform-specific harvest)
      shell: pwsh
      run: |
        Write-Host "=== Building WiX Setup Projects with Platform-Specific Harvest ===" -ForegroundColor Cyan
        Write-Host "üöÄ Generating AutoHarvestFiles.wxs and building MSI for each architecture" -ForegroundColor Green

        $platforms = @(
          @{ Name = "x64"; RID = "win-x64"; ProgramFiles = "ProgramFiles64Folder" },
          @{ Name = "x86"; RID = "win-x86"; ProgramFiles = "ProgramFilesFolder" },
          @{ Name = "ARM64"; RID = "win-arm64"; ProgramFiles = "ProgramFiles64Folder" }
        )

        foreach ($platform in $platforms) {
          Write-Host "`nüèóÔ∏è Processing $($platform.Name) architecture..." -ForegroundColor Yellow

          # Step 1: Generate platform-specific AutoHarvestFiles.wxs
          Write-Host "  üìã Step 1: Generating AutoHarvestFiles.wxs for $($platform.Name)..." -ForegroundColor Cyan

          Push-Location "setup/Bucket.Setup"
          try {
            $publishPath = "..\..\src\Bucket.App\bin\$($platform.Name)\${{ inputs.configuration }}\net9.0-windows10.0.26100\$($platform.RID)\publish"
            Write-Host "    üîç Using publish path: $publishPath" -ForegroundColor Gray

            .\Generate-AutoHarvestFiles.ps1 -PublishPath $publishPath

            if ($LASTEXITCODE -eq 0) {
              Write-Host "    ‚úÖ AutoHarvestFiles.wxs generated successfully for $($platform.Name)" -ForegroundColor Green

              # Show statistics for this platform's harvest file
              if (Test-Path "AutoHarvestFiles.wxs") {
                $content = Get-Content "AutoHarvestFiles.wxs" -Raw
                $componentCount = ($content | Select-String '<Component ' -AllMatches).Matches.Count
                $fileCount = ($content | Select-String '<File ' -AllMatches).Matches.Count
                Write-Host "    üìä Generated $componentCount components with $fileCount files" -ForegroundColor Cyan
              }
            } else {
              Write-Error "‚ùå Failed to generate AutoHarvestFiles.wxs for $($platform.Name)"
              exit 1
            }
          } finally {
            Pop-Location
          }

          # Step 2: Build MSI for this platform using the fresh AutoHarvestFiles.wxs
          Write-Host "  üî® Step 2: Building MSI for $($platform.Name)..." -ForegroundColor Cyan

          $buildArgs = @(
            "build",
            "setup/Bucket.Setup/Bucket.Setup.wixproj",
            "-c", "${{ inputs.configuration }}",
            "-p:Platform=$($platform.Name)",
            "-p:Version=${{ inputs.version }}",
            "-p:RuntimeIdentifier=$($platform.RID)",
            "-p:ProgramFilesFolder=$($platform.ProgramFiles)",
            "--verbosity", "normal"
          )

          Write-Host "    üìã Build command: dotnet $($buildArgs -join ' ')" -ForegroundColor Gray

          dotnet @buildArgs

          if ($LASTEXITCODE -eq 0) {
            $expectedMsi = "artifacts/installers/Bucket-${{ inputs.version }}-$($platform.Name).msi"

            if (Test-Path $expectedMsi) {
              $fileInfo = Get-Item $expectedMsi
              $fileSizeMB = [math]::Round($fileInfo.Length / 1MB, 2)
              Write-Host "    ‚úÖ Successfully built MSI for $($platform.Name): $fileSizeMB MB" -ForegroundColor Green

              # Show publish directory contents for verification
              $publishPath = "src/Bucket.App/bin/$($platform.Name)/${{ inputs.configuration }}/net9.0-windows10.0.26100/$($platform.RID)/publish"
              if (Test-Path $publishPath) {
                $files = Get-ChildItem -Path $publishPath -Recurse -File
                Write-Host "    üìä Harvested $($files.Count) files from publish directory" -ForegroundColor Cyan

                # Show key files
                $keyFiles = $files | Where-Object { $_.Extension -in @('.exe', '.dll', '.json') } | Select-Object -First 5
                $keyFiles | ForEach-Object {
                  Write-Host "        üî∏ $($_.Name)" -ForegroundColor Gray
                }
                if ($files.Count -gt 5) {
                  Write-Host "        ... and $($files.Count - 5) more files" -ForegroundColor Gray
                }
              }
            } else {
              Write-Error "‚ùå Expected MSI file not found: $expectedMsi"
              exit 1
            }
          } else {
            Write-Error "‚ùå Failed to build MSI for $($platform.Name)"

            # Show build logs for debugging
            $logPaths = @(
              "setup/Bucket.Setup/obj/$($platform.Name)/${{ inputs.configuration }}",
              "setup/Bucket.Setup/bin/$($platform.Name)/${{ inputs.configuration }}"
            )

            foreach ($logPath in $logPaths) {
              if (Test-Path $logPath) {
                Write-Host "Searching for logs in: $logPath" -ForegroundColor Yellow
                Get-ChildItem $logPath -Recurse -File -Filter "*.log" -ErrorAction SilentlyContinue |
                  ForEach-Object {
                    Write-Host "Build log: $($_.FullName)" -ForegroundColor Yellow
                    Get-Content $_.FullName -Tail 20 -ErrorAction SilentlyContinue
                  }
              }
            }
            exit 1
          }

          Write-Host "  üéâ Completed $($platform.Name) architecture successfully!" -ForegroundColor Green
        }



    - name: Verify generated MSI files
      shell: pwsh
      run: |
        Write-Host "=== Verifying Generated MSI Files ===" -ForegroundColor Cyan

        $expectedFiles = @(
          "Bucket-${{ inputs.version }}-x64.msi",
          "Bucket-${{ inputs.version }}-x86.msi",
          "Bucket-${{ inputs.version }}-ARM64.msi"
        )

        $installersPath = "artifacts/installers"
        $missingFiles = @()
        $generatedFiles = @()

        foreach ($file in $expectedFiles) {
          $fullPath = Join-Path $installersPath $file
          if (Test-Path $fullPath) {
            $fileInfo = Get-Item $fullPath
            $fileSizeMB = [math]::Round($fileInfo.Length / 1MB, 2)
            $generatedFiles += "  - $file ($fileSizeMB MB)"
            Write-Host "‚úÖ Found: $file ($fileSizeMB MB)" -ForegroundColor Green
          } else {
            $missingFiles += $file
            Write-Host "‚ùå Missing: $file" -ForegroundColor Red
          }
        }

        if ($missingFiles.Count -gt 0) {
          Write-Host "Missing files:" -ForegroundColor Red
          $missingFiles | ForEach-Object { Write-Host "  - $_" -ForegroundColor Red }

          # List what files are actually in the installers directory
          Write-Host "Files in installers directory:" -ForegroundColor Yellow
          if (Test-Path $installersPath) {
            Get-ChildItem $installersPath | ForEach-Object {
              Write-Host "  - $($_.Name)" -ForegroundColor Yellow
            }
          } else {
            Write-Host "  (directory doesn't exist)" -ForegroundColor Red
          }

          exit 1
        }

        Write-Host "All installer files generated successfully!" -ForegroundColor Green
        Write-Host "Generated files:" -ForegroundColor Cyan
        $generatedFiles | ForEach-Object { Write-Host $_ -ForegroundColor Green }

    - name: Upload installer artifacts
      uses: actions/upload-artifact@v4
      with:
        name: installer-artifacts
        path: artifacts/installers/
        retention-days: 7
        if-no-files-found: error

    - name: Installation verification summary
      shell: pwsh
      run: |
        Write-Host "=== Installation Package Summary ===" -ForegroundColor Cyan

        $installersPath = "artifacts/installers"
        if (Test-Path $installersPath) {
          $msiFiles = Get-ChildItem -Path $installersPath -Filter "*.msi"
          $totalSize = ($msiFiles | Measure-Object -Property Length -Sum).Sum / 1MB

          Write-Host "üì¶ Generated $($msiFiles.Count) MSI installers (Total: $([math]::Round($totalSize, 2)) MB)" -ForegroundColor Green

          foreach ($file in $msiFiles) {
            $sizeMB = [math]::Round($file.Length / 1MB, 2)
            Write-Host "  ‚úÖ $($file.Name) - $sizeMB MB" -ForegroundColor Green
          }

          Write-Host "" -ForegroundColor Cyan
          Write-Host "üéØ Ready for GitHub Release distribution!" -ForegroundColor Green
        }
