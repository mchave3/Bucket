name: 'Create Installers'
description: 'Generate MSI installers using WiX Toolset for all architectures'
inputs:
  version:
    description: 'Version for the installers'
    required: true
  configuration:
    description: 'Build configuration'
    required: false
    default: 'Release'

outputs:
  installers-path:
    description: 'Path to generated installers'
    value: ${{ steps.paths.outputs.installers }}

runs:
  using: 'composite'
  steps:
    - name: Setup paths
      id: paths
      shell: pwsh
      run: |
        $installersPath = "artifacts/installers"
        New-Item -ItemType Directory -Force -Path $installersPath | Out-Null
        echo "installers=$installersPath" >> $env:GITHUB_OUTPUT
        Write-Host "Installers will be generated in: $installersPath" -ForegroundColor Cyan

    - name: Install WiX Toolset
      shell: pwsh
      run: |
        Write-Host "=== Installing WiX Toolset ===" -ForegroundColor Cyan
        
        # Install WiX as a global tool
        dotnet tool install --global wix --version 5.0.1
        
        if ($LASTEXITCODE -eq 0) {
          Write-Host "‚úÖ WiX Toolset installed successfully" -ForegroundColor Green
        } else {
          Write-Error "‚ùå Failed to install WiX Toolset"
          exit 1
        }
        
        # Verify installation
        wix --version
        Write-Host "WiX Toolset is ready!" -ForegroundColor Green

    - name: Setup .NET and MSBuild
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Ensure artifacts directory exists
      shell: pwsh
      run: |
        Write-Host "Creating artifacts directory structure..." -ForegroundColor Cyan
        
        $directories = @(
          "artifacts/installers",
          "artifacts/publish/win-x64",
          "artifacts/publish/win-x86", 
          "artifacts/publish/win-arm64"
        )
        
        foreach ($dir in $directories) {
          New-Item -ItemType Directory -Force -Path $dir | Out-Null
          Write-Host "‚úÖ Created: $dir" -ForegroundColor Green
        }

    - name: Publish application for all platforms
      shell: pwsh
      run: |
        Write-Host "=== Publishing Application for All Platforms ===" -ForegroundColor Cyan
        
        $platforms = @(
          @{ Name = "x64"; RID = "win-x64" },
          @{ Name = "x86"; RID = "win-x86" },
          @{ Name = "ARM64"; RID = "win-arm64" }
        )
        
        foreach ($platform in $platforms) {
          Write-Host "Publishing for $($platform.Name)..." -ForegroundColor Yellow
          
          $publishArgs = @(
            "publish",
            "src/Bucket.App/Bucket.App.csproj",
            "-c", "${{ inputs.configuration }}",
            "-r", $platform.RID,
            "-p:Platform=$($platform.Name)",
            "-p:Version=${{ inputs.version }}",
            "-p:PublishSingleFile=false",
            "-p:SelfContained=true",
            "-p:PublishReadyToRun=false",
            "-p:PublishTrimmed=false",
            "--no-restore"
          )
          
          dotnet @publishArgs
          
          if ($LASTEXITCODE -eq 0) {
            $publishPath = "src/Bucket.App/bin/$($platform.Name)/${{ inputs.configuration }}/net9.0-windows10.0.26100/$($platform.RID)/publish"
            $fileCount = (Get-ChildItem -Path $publishPath -Recurse -File).Count
            Write-Host "‚úÖ Published $($platform.Name): $fileCount files" -ForegroundColor Green
          } else {
            Write-Error "‚ùå Failed to publish for $($platform.Name)"
            exit 1
          }
        }

    - name: Build WiX Setup Projects
      shell: pwsh
      run: |
        Write-Host "=== Building WiX Setup Projects ===" -ForegroundColor Cyan
        
        $platforms = @("x64", "x86", "ARM64")
        
        foreach ($platform in $platforms) {
          Write-Host "Building MSI for $platform..." -ForegroundColor Yellow
          
          # Build the WiX project for this platform
          $buildArgs = @(
            "build",
            "setup/Bucket.Setup/Bucket.Setup.wixproj",
            "-c", "${{ inputs.configuration }}",
            "-p:Platform=$platform",
            "-p:Version=${{ inputs.version }}",
            "--no-restore"
          )
          
          dotnet @buildArgs
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Successfully built MSI for $platform" -ForegroundColor Green
          } else {
            Write-Error "‚ùå Failed to build MSI for $platform"
            Get-ChildItem "setup/Bucket.Setup/obj/$platform/${{ inputs.configuration }}" -Recurse -File -Filter "*.log" | 
              ForEach-Object { 
                Write-Host "Build log: $($_.FullName)" -ForegroundColor Yellow
                Get-Content $_.FullName -Tail 50
              }
            exit 1
          }
        }

    - name: Verify generated MSI files
      shell: pwsh
      run: |
        Write-Host "=== Verifying Generated MSI Files ===" -ForegroundColor Cyan
        
        $expectedFiles = @(
          "Bucket-${{ inputs.version }}-x64.msi",
          "Bucket-${{ inputs.version }}-x86.msi", 
          "Bucket-${{ inputs.version }}-ARM64.msi"
        )
        
        $installersPath = "artifacts/installers"
        $missingFiles = @()
        $generatedFiles = @()
        
        foreach ($file in $expectedFiles) {
          $fullPath = Join-Path $installersPath $file
          if (Test-Path $fullPath) {
            $fileInfo = Get-Item $fullPath
            $fileSizeMB = [math]::Round($fileInfo.Length / 1MB, 2)
            $generatedFiles += "  - $file ($fileSizeMB MB)"
            Write-Host "‚úÖ Found: $file ($fileSizeMB MB)" -ForegroundColor Green
          } else {
            $missingFiles += $file
            Write-Host "‚ùå Missing: $file" -ForegroundColor Red
          }
        }
        
        if ($missingFiles.Count -gt 0) {
          Write-Host "Missing files:" -ForegroundColor Red
          $missingFiles | ForEach-Object { Write-Host "  - $_" -ForegroundColor Red }
          
          # List what files are actually in the installers directory
          Write-Host "Files in installers directory:" -ForegroundColor Yellow
          if (Test-Path $installersPath) {
            Get-ChildItem $installersPath | ForEach-Object { 
              Write-Host "  - $($_.Name)" -ForegroundColor Yellow 
            }
          } else {
            Write-Host "  (directory doesn't exist)" -ForegroundColor Red
          }
          
          exit 1
        }
        
        Write-Host "All installer files generated successfully!" -ForegroundColor Green
        Write-Host "Generated files:" -ForegroundColor Cyan
        $generatedFiles | ForEach-Object { Write-Host $_ -ForegroundColor Green }

    - name: Upload installer artifacts
      uses: actions/upload-artifact@v4
      with:
        name: installer-artifacts
        path: artifacts/installers/
        retention-days: 7
        if-no-files-found: error

    - name: Installation verification summary
      shell: pwsh
      run: |
        Write-Host "=== Installation Package Summary ===" -ForegroundColor Cyan
        
        $installersPath = "artifacts/installers"
        if (Test-Path $installersPath) {
          $msiFiles = Get-ChildItem -Path $installersPath -Filter "*.msi"
          $totalSize = ($msiFiles | Measure-Object -Property Length -Sum).Sum / 1MB
          
          Write-Host "üì¶ Generated $($msiFiles.Count) MSI installers (Total: $([math]::Round($totalSize, 2)) MB)" -ForegroundColor Green
          
          foreach ($file in $msiFiles) {
            $sizeMB = [math]::Round($file.Length / 1MB, 2)
            Write-Host "  ‚úÖ $($file.Name) - $sizeMB MB" -ForegroundColor Green
          }
          
          Write-Host "" -ForegroundColor Cyan
          Write-Host "üéØ Ready for GitHub Release distribution!" -ForegroundColor Green
        }
