name: 'Create Installers'
description: 'Generate MSI installers using Advanced Installer for all architectures'
inputs:
  version:
    description: 'Version for the installers'
    required: true
  configuration:
    description: 'Build configuration'
    required: false
    default: 'Release'
  advinst-license:
    description: 'Advanced Installer license key'
    required: false
    default: ''

outputs:
  installers-path:
    description: 'Path to generated installers'
    value: ${{ steps.paths.outputs.installers }}

runs:
  using: 'composite'
  steps:
    - name: Setup paths
      id: paths
      shell: pwsh
      run: |
        $installersPath = "artifacts/installers"
        New-Item -ItemType Directory -Force -Path $installersPath | Out-Null
        echo "installers=$installersPath" >> $env:GITHUB_OUTPUT

    - name: Download and Install Advanced Installer MSI
      shell: pwsh
      run: |
        Write-Host "=== Downloading Advanced Installer MSI ===" -ForegroundColor Cyan

        # Download Advanced Installer MSI
        $downloadUrl = "https://www.advancedinstaller.com/downloads/advinst.msi"
        $msiPath = "$env:TEMP\advinst.msi"

        Write-Host "Downloading from: $downloadUrl"
        Invoke-WebRequest -Uri $downloadUrl -OutFile $msiPath -UseBasicParsing

        Write-Host "Downloaded to: $msiPath"
        Write-Host "File size: $((Get-Item $msiPath).Length / 1MB) MB"

        Write-Host "=== Installing Advanced Installer MSI ===" -ForegroundColor Cyan

        # Install Advanced Installer silently
        $installArgs = @(
          "/i", $msiPath,
          "/quiet",
          "/norestart"
        )

        if ("${{ inputs.advinst-license }}" -ne "") {
          Write-Host "Installing with license key..."
          $installArgs += "AI_LICENSE_KEY=${{ inputs.advinst-license }}"
        } else {
          Write-Host "Installing without license (free version)..."
        }

        Write-Host "Running: msiexec $($installArgs -join ' ')"
        $process = Start-Process -FilePath "msiexec.exe" -ArgumentList $installArgs -Wait -PassThru

        if ($process.ExitCode -eq 0) {
          Write-Host "✅ Advanced Installer MSI installed successfully" -ForegroundColor Green
        } else {
          Write-Error "❌ Advanced Installer MSI installation failed with exit code: $($process.ExitCode)"
          exit 1
        }

        # Clean up downloaded MSI
        Remove-Item -Path $msiPath -Force -ErrorAction SilentlyContinue

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Build Setup Projects with MSBuild
      shell: pwsh
      run: |
        Write-Host "=== Building Setup Projects with MSBuild ===" -ForegroundColor Cyan

        $setupProjects = @(
          "setup/Bucket.Setup_x64/Bucket.Setup_x64.aiproj",
          "setup/Bucket.Setup_x86/Bucket.Setup_x86.aiproj",
          "setup/Bucket.Setup_arm64/Bucket.Setup_arm64.aiproj"
        )

        foreach ($project in $setupProjects) {
          if (Test-Path $project) {
            Write-Host "Building: $project" -ForegroundColor Yellow

            # Build the setup project with MSBuild
            msbuild $project `
              /p:Configuration=DefaultBuild `
              /t:Build `
              /v:minimal

            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ Successfully built: $project" -ForegroundColor Green
            } else {
              Write-Error "❌ Failed to build: $project"
              exit 1
            }
          } else {
            Write-Warning "Setup project not found: $project"
          }
        }

    - name: Deploy Advanced Installer Tool (Caphyon Action)
      uses: caphyon/advinst-github-action@main
      with:
        advinst-version: '23.0'
        advinst-license: ${{ inputs.advinst-license }}
        advinst-enable-automation: 'false'

    - name: Update version in Advanced Installer projects
      shell: pwsh
      run: |
        Write-Host "Updating version in Advanced Installer projects to ${{ inputs.version }}..." -ForegroundColor Cyan

        # Extract clean version (remove pre-release suffix)
        $versionBase = "${{ inputs.version }}" -replace '-.*$', ''
        Write-Host "Base version: $versionBase"

        # Update each .aip file using Advanced Installer command line
        $aipFiles = @(
          "setup/Bucket.Setup_x64/Bucket.Setup_x64.aip",
          "setup/Bucket.Setup_x86/Bucket.Setup_x86.aip",
          "setup/Bucket.Setup_arm64/Bucket.Setup_arm64.aip"
        )

        # Find Advanced Installer executable
        $aiPaths = @(
          "${env:ProgramFiles(x86)}\Caphyon\Advanced Installer 23.0\bin\x86\AdvancedInstaller.com",
          "${env:ProgramFiles}\Caphyon\Advanced Installer 23.0\bin\x86\AdvancedInstaller.com"
        )

        $aiExe = $null
        foreach ($path in $aiPaths) {
          if (Test-Path $path) {
            $aiExe = $path
            break
          }
        }

        if (-not $aiExe) {
          Write-Warning "Advanced Installer executable not found. Skipping version update."
        } else {
          Write-Host "Using Advanced Installer at: $aiExe"

          foreach ($aipFile in $aipFiles) {
            if (Test-Path $aipFile) {
              Write-Host "Updating version in $aipFile..."

              # Use Advanced Installer command line to update version
              $fullPath = Resolve-Path $aipFile
              & "$aiExe" /edit "$fullPath" /SetVersion $versionBase

              if ($LASTEXITCODE -eq 0) {
                Write-Host "✅ Updated version in $aipFile" -ForegroundColor Green
              } else {
                Write-Warning "Failed to update version in $aipFile"
              }
            } else {
              Write-Warning "AIP file not found: $aipFile"
            }
          }
        }

    - name: Copy generated MSI files to artifacts
      shell: pwsh
      run: |
        Write-Host "=== Copying Generated MSI Files ===" -ForegroundColor Cyan

        $msiMappings = @{
          "setup/Bucket.Setup_x64/Bucket.Setup_x64-SetupFiles/Bucket.Setup_x64.msi" = "Bucket-${{ inputs.version }}-x64.msi"
          "setup/Bucket.Setup_x86/Bucket.Setup_x86-SetupFiles/Bucket.Setup_x86.msi" = "Bucket-${{ inputs.version }}-x86.msi"
          "setup/Bucket.Setup_arm64/Bucket.Setup_arm64-SetupFiles/Bucket.Setup_arm64.msi" = "Bucket-${{ inputs.version }}-arm64.msi"
        }

        foreach ($mapping in $msiMappings.GetEnumerator()) {
          $source = $mapping.Key
          $destination = "artifacts/installers/$($mapping.Value)"

          if (Test-Path $source) {
            Copy-Item -Path $source -Destination $destination -Force
            $fileSize = (Get-Item $destination).Length / 1MB
            Write-Host "✅ Copied: $($mapping.Value) ($("{0:N2}" -f $fileSize) MB)" -ForegroundColor Green
          } else {
            Write-Warning "⚠️ MSI not found: $source"
          }
        }

    - name: List generated installers
      shell: pwsh
      run: |
        Write-Host "=== Generated Installers ===" -ForegroundColor Cyan
        $installersPath = "artifacts/installers"

        if (Test-Path $installersPath) {
          $msiFiles = Get-ChildItem -Path $installersPath -Filter "*.msi"
          if ($msiFiles.Count -gt 0) {
            $msiFiles | ForEach-Object {
              Write-Host "  - $($_.Name) ($('{0:N2} MB' -f ($_.Length / 1MB)))" -ForegroundColor Green
            }
          } else {
            Write-Host "  No MSI files found" -ForegroundColor Yellow
          }
        }

    - name: Verify installer generation
      shell: pwsh
      run: |
        Write-Host "=== Verifying Installer Generation ===" -ForegroundColor Cyan
        $installersPath = "artifacts/installers"
        $expectedFiles = @(
          "Bucket-${{ inputs.version }}-x64.msi",
          "Bucket-${{ inputs.version }}-x86.msi",
          "Bucket-${{ inputs.version }}-arm64.msi"
        )

        $missingFiles = @()
        foreach ($file in $expectedFiles) {
          $fullPath = Join-Path $installersPath $file
          if (-not (Test-Path $fullPath)) {
            $missingFiles += $file
          }
        }

        if ($missingFiles.Count -gt 0) {
          Write-Error "❌ Missing installer files: $($missingFiles -join ', ')"
          exit 1
        } else {
          Write-Host "✅ All installer files generated successfully" -ForegroundColor Green
        }

    - name: Upload installer artifacts
      uses: actions/upload-artifact@v4
      with:
        name: installer-artifacts
        path: artifacts/installers/
        retention-days: 7
