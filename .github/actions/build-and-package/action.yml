name: 'Build and Package'
description: 'Build and publish the solution for all architectures (x64, x86, ARM64)'
inputs:
  configuration:
    description: 'Build configuration'
    required: false
    default: 'Release'
  version:
    description: 'Version to apply to builds'
    required: true
  create-zip:
    description: 'Create ZIP packages'
    required: false
    default: 'true'

outputs:
  artifacts-path:
    description: 'Path to build artifacts'
    value: ${{ steps.paths.outputs.artifacts }}

runs:
  using: 'composite'
  steps:
    - name: Setup paths
      id: paths
      shell: pwsh
      run: |
        $artifactsPath = "artifacts"
        New-Item -ItemType Directory -Force -Path $artifactsPath | Out-Null
        echo "artifacts=$artifactsPath" >> $env:GITHUB_OUTPUT

    - name: Update version in project files
      shell: pwsh
      run: |
        Write-Host "Setting version to ${{ inputs.version }}..." -ForegroundColor Cyan

        # Extract version numbers (remove any pre-release suffix like -Nightly)
        $versionBase = "${{ inputs.version }}" -replace '-.*$', ''
        $versionParts = $versionBase -split '\.'

        # Ensure we have 4 version parts
        while ($versionParts.Count -lt 4) {
          $versionParts += "0"
        }

        $assemblyVersion = $versionParts -join '.'
        $fileVersion = $assemblyVersion
        $packageVersion = "${{ inputs.version }}"

        Write-Host "Assembly Version: $assemblyVersion"
        Write-Host "File Version: $fileVersion"
        Write-Host "Package Version: $packageVersion"

        # Update Directory.Build.props if it exists
        $buildPropsPath = "Directory.Build.props"
        if (Test-Path $buildPropsPath) {
          $content = Get-Content $buildPropsPath -Raw
          $content = $content -replace '<Version>.*?</Version>', "<Version>$packageVersion</Version>"
          $content = $content -replace '<AssemblyVersion>.*?</AssemblyVersion>', "<AssemblyVersion>$assemblyVersion</AssemblyVersion>"
          $content = $content -replace '<FileVersion>.*?</FileVersion>', "<FileVersion>$fileVersion</FileVersion>"
          Set-Content -Path $buildPropsPath -Value $content
        }

    - name: Restore NuGet packages
      shell: pwsh
      run: |
        Write-Host "=== Restoring NuGet packages ===" -ForegroundColor Cyan

        # Restore packages for all projects
        dotnet restore Bucket.sln --verbosity minimal

        if ($LASTEXITCODE -ne 0) {
          Write-Error "NuGet restore failed!"
          exit 1
        }

        Write-Host "âœ… NuGet packages restored successfully" -ForegroundColor Green

    - name: Build for x64
      shell: pwsh
      run: |
        Write-Host "=== Building for x64 ===" -ForegroundColor Green

        # Build solution (exclude Advanced Installer projects)
        msbuild src/Bucket.App/Bucket.App.csproj `
          /p:Configuration=${{ inputs.configuration }} `
          /p:Platform=x64 `
          /t:Rebuild `
          /m `
          /v:minimal

        msbuild src/Bucket.Core/Bucket.Core.csproj `
          /p:Configuration=${{ inputs.configuration }} `
          /t:Rebuild `
          /m `
          /v:minimal

        msbuild tests/Bucket.App.Tests/Bucket.App.Tests.csproj `
          /p:Configuration=${{ inputs.configuration }} `
          /p:Platform=x64 `
          /t:Rebuild `
          /m `
          /v:minimal

        msbuild tests/Bucket.Core.Tests/Bucket.Core.Tests.csproj `
          /p:Configuration=${{ inputs.configuration }} `
          /t:Rebuild `
          /m `
          /v:minimal

        if ($LASTEXITCODE -ne 0) {
          Write-Error "x64 build failed!"
          exit 1
        }

        # Publish application (for Advanced Installer compatibility)
        dotnet publish src/Bucket.App/Bucket.App.csproj `
          --configuration ${{ inputs.configuration }} `
          --runtime win-x64 `
          --self-contained true `
          --output "src/Bucket.App/bin/x64/${{ inputs.configuration }}/net9.0-windows10.0.26100/win-x64/publish" `
          /p:Platform=x64 `
          /p:PublishSingleFile=false

        # Also publish to artifacts for ZIP creation
        dotnet publish src/Bucket.App/Bucket.App.csproj `
          --configuration ${{ inputs.configuration }} `
          --runtime win-x64 `
          --self-contained true `
          --output "artifacts/publish/x64" `
          /p:Platform=x64 `
          /p:PublishSingleFile=false

        if ($LASTEXITCODE -ne 0) {
          Write-Error "x64 publish failed!"
          exit 1
        }

    - name: Build for x86
      shell: pwsh
      run: |
        Write-Host "=== Building for x86 ===" -ForegroundColor Green

        # Build solution (exclude Advanced Installer projects)
        msbuild src/Bucket.App/Bucket.App.csproj `
          /p:Configuration=${{ inputs.configuration }} `
          /p:Platform=x86 `
          /t:Rebuild `
          /m `
          /v:minimal

        msbuild src/Bucket.Core/Bucket.Core.csproj `
          /p:Configuration=${{ inputs.configuration }} `
          /t:Rebuild `
          /m `
          /v:minimal

        msbuild tests/Bucket.App.Tests/Bucket.App.Tests.csproj `
          /p:Configuration=${{ inputs.configuration }} `
          /p:Platform=x86 `
          /t:Rebuild `
          /m `
          /v:minimal

        msbuild tests/Bucket.Core.Tests/Bucket.Core.Tests.csproj `
          /p:Configuration=${{ inputs.configuration }} `
          /t:Rebuild `
          /m `
          /v:minimal

        if ($LASTEXITCODE -ne 0) {
          Write-Error "x86 build failed!"
          exit 1
        }

        # Publish application (for Advanced Installer compatibility)
        dotnet publish src/Bucket.App/Bucket.App.csproj `
          --configuration ${{ inputs.configuration }} `
          --runtime win-x86 `
          --self-contained true `
          --output "src/Bucket.App/bin/x86/${{ inputs.configuration }}/net9.0-windows10.0.26100/win-x86/publish" `
          /p:Platform=x86 `
          /p:PublishSingleFile=false

        # Also publish to artifacts for ZIP creation
        dotnet publish src/Bucket.App/Bucket.App.csproj `
          --configuration ${{ inputs.configuration }} `
          --runtime win-x86 `
          --self-contained true `
          --output "artifacts/publish/x86" `
          /p:Platform=x86 `
          /p:PublishSingleFile=false

        if ($LASTEXITCODE -ne 0) {
          Write-Error "x86 publish failed!"
          exit 1
        }

    - name: Build for ARM64
      shell: pwsh
      run: |
        Write-Host "=== Building for ARM64 ===" -ForegroundColor Green

        # Build solution (exclude Advanced Installer projects)
        msbuild src/Bucket.App/Bucket.App.csproj `
          /p:Configuration=${{ inputs.configuration }} `
          /p:Platform=ARM64 `
          /t:Rebuild `
          /m `
          /v:minimal

        msbuild src/Bucket.Core/Bucket.Core.csproj `
          /p:Configuration=${{ inputs.configuration }} `
          /t:Rebuild `
          /m `
          /v:minimal

        msbuild tests/Bucket.App.Tests/Bucket.App.Tests.csproj `
          /p:Configuration=${{ inputs.configuration }} `
          /p:Platform=ARM64 `
          /t:Rebuild `
          /m `
          /v:minimal

        msbuild tests/Bucket.Core.Tests/Bucket.Core.Tests.csproj `
          /p:Configuration=${{ inputs.configuration }} `
          /t:Rebuild `
          /m `
          /v:minimal

        if ($LASTEXITCODE -ne 0) {
          Write-Error "ARM64 build failed!"
          exit 1
        }

        # Publish application (for Advanced Installer compatibility)
        dotnet publish src/Bucket.App/Bucket.App.csproj `
          --configuration ${{ inputs.configuration }} `
          --runtime win-arm64 `
          --self-contained true `
          --output "src/Bucket.App/bin/ARM64/${{ inputs.configuration }}/net9.0-windows10.0.26100/win-arm64/publish" `
          /p:Platform=ARM64 `
          /p:PublishSingleFile=false

        # Also publish to artifacts for ZIP creation
        dotnet publish src/Bucket.App/Bucket.App.csproj `
          --configuration ${{ inputs.configuration }} `
          --runtime win-arm64 `
          --self-contained true `
          --output "artifacts/publish/arm64" `
          /p:Platform=ARM64 `
          /p:PublishSingleFile=false

        if ($LASTEXITCODE -ne 0) {
          Write-Error "ARM64 publish failed!"
          exit 1
        }

    - name: Create ZIP packages
      if: inputs.create-zip == 'true'
      shell: pwsh
      run: |
        Write-Host "=== Creating ZIP packages ===" -ForegroundColor Cyan

        $version = "${{ inputs.version }}"
        $zipPath = "artifacts/zip"
        New-Item -ItemType Directory -Force -Path $zipPath | Out-Null

        # Create ZIP for each architecture
        $architectures = @("x64", "x86", "arm64")
        foreach ($arch in $architectures) {
          $sourcePath = "artifacts/publish/$arch"
          $zipFile = "$zipPath/Bucket-$version-$arch.zip"

          Write-Host "Creating $zipFile..." -ForegroundColor Yellow

          if (Test-Path $sourcePath) {
            Compress-Archive -Path "$sourcePath/*" -DestinationPath $zipFile -Force
            Write-Host "Created: $zipFile" -ForegroundColor Green
          } else {
            Write-Warning "Source path not found: $sourcePath"
          }
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: artifacts/
        retention-days: 7
