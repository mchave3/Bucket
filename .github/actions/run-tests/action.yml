name: 'Run Tests'
description: 'Execute unit tests for Bucket.App.Tests and Bucket.Core.Tests'
inputs:
  configuration:
    description: 'Build configuration'
    required: false
    default: 'Release'
  test-results-path:
    description: 'Path for test results'
    required: false
    default: 'test-results'
  generate-coverage:
    description: 'Generate code coverage'
    required: false
    default: 'true'

outputs:
  test-results-path:
    description: 'Path to test results'
    value: ${{ steps.test-results.outputs.path }}
  coverage-path:
    description: 'Path to coverage results'
    value: ${{ steps.test-results.outputs.coverage }}

runs:
  using: 'composite'
  steps:
    - name: Restore dependencies
      shell: pwsh
      run: |
        Write-Host "Restoring NuGet packages..." -ForegroundColor Cyan
        dotnet restore Bucket.sln

    - name: Run Bucket.Core.Tests
      shell: pwsh
      run: |
        Write-Host "=== Running Bucket.Core.Tests ===" -ForegroundColor Green
        $testProject = "tests/Bucket.Core.Tests/Bucket.Core.Tests.csproj"

        $testArgs = @(
          "test",
          $testProject,
          "--configuration", "${{ inputs.configuration }}",
          "--no-restore",
          "--verbosity", "normal",
          "--logger", "trx;LogFileName=Bucket.Core.Tests.trx",
          "--results-directory", "${{ inputs.test-results-path }}"
        )

        if ("${{ inputs.generate-coverage }}" -eq "true") {
          $testArgs += "--collect:""XPlat Code Coverage"""
          $testArgs += "--"
          $testArgs += "DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura"
        }

        & dotnet $testArgs
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Bucket.Core.Tests failed!"
          exit 1
        }

    - name: Run Bucket.App.Tests
      shell: pwsh
      run: |
        Write-Host "=== Running Bucket.App.Tests ===" -ForegroundColor Green
        $testProject = "tests/Bucket.App.Tests/Bucket.App.Tests.csproj"

        $testArgs = @(
          "test",
          $testProject,
          "--configuration", "${{ inputs.configuration }}",
          "--no-restore",
          "--verbosity", "normal",
          "--logger", "trx;LogFileName=Bucket.App.Tests.trx",
          "--results-directory", "${{ inputs.test-results-path }}"
        )

        if ("${{ inputs.generate-coverage }}" -eq "true") {
          $testArgs += "--collect:""XPlat Code Coverage"""
          $testArgs += "--"
          $testArgs += "DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura"
        }

        & dotnet $testArgs
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Bucket.App.Tests failed!"
          exit 1
        }

    - name: Test Summary
      id: test-results
      shell: pwsh
      run: |
        Write-Host "=== Test Results Summary ===" -ForegroundColor Cyan

        $testResultsPath = "${{ inputs.test-results-path }}"
        echo "path=$testResultsPath" >> $env:GITHUB_OUTPUT

        if (Test-Path $testResultsPath) {
          $trxFiles = Get-ChildItem -Path $testResultsPath -Filter "*.trx"
          foreach ($trx in $trxFiles) {
            Write-Host "Test Result: $($trx.Name)" -ForegroundColor Yellow
          }

          if ("${{ inputs.generate-coverage }}" -eq "true") {
            $coverageFiles = Get-ChildItem -Path $testResultsPath -Recurse -Filter "coverage.cobertura.xml"
            if ($coverageFiles.Count -gt 0) {
              Write-Host "Code coverage reports generated: $($coverageFiles.Count)" -ForegroundColor Green
              echo "coverage=$testResultsPath" >> $env:GITHUB_OUTPUT
            }
          }
        }

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ${{ inputs.test-results-path }}
        retention-days: 7
