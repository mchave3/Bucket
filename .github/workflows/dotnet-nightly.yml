name: 🌙 Nightly Build

# Global configuration - modify these to change default behavior
env:
  SKIP_TESTS_DEFAULT: true  # Set to true to skip tests by default for scheduled runs

on:
  schedule:
    # Run at 2:00 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force-build:
        description: 'Force build even if no changes'
        required: false
        type: boolean
        default: false
      skip-tests:
        description: 'Skip running tests'
        required: false
        type: boolean
        default: false

# Only run on dev branch
jobs:
  check-changes:
    name: 🔍 Check for Changes
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      version: ${{ steps.version.outputs.version }}
      msi_version: ${{ steps.version.outputs.msi_version }}
      commit-sha: ${{ steps.get-commit.outputs.commit-sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: dev

      - name: Get current commit SHA
        id: get-commit
        shell: bash
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "Build will use commit: $COMMIT_SHA"

      - name: Check for merged PRs since last tag

        id: check
        shell: pwsh
        run: |
          Write-Host "Checking for PRs since last tag..." -ForegroundColor Cyan

          # Get the latest nightly tag (only compare with previous nightly builds)
          $latestTag = git tag -l --sort=-version:refname | Where-Object { $_ -match '\-Nightly$' } | Select-Object -First 1
          Write-Host "Latest release: $latestTag" -ForegroundColor Yellow

          if ([string]::IsNullOrEmpty($latestTag)) {
            Write-Host "No previous tags found, building first nightly" -ForegroundColor Green
            echo "should-build=true" >> $env:GITHUB_OUTPUT
          } else {
            # Get all PRs since last tag (including squash commits with PR numbers)
            $mergedPRs = git log --grep="(#[0-9]" --pretty=format:"%h %s" "$latestTag..dev" 2>$null

            $mergeCount = ($mergedPRs | Measure-Object).Count

            if ($mergeCount -eq 0) {
              if ("${{ github.event.inputs.force-build }}" -eq "true") {
                Write-Host "No PRs found since last tag, but force build requested" -ForegroundColor Yellow
                echo "should-build=true" >> $env:GITHUB_OUTPUT
              } else {
                Write-Host "No PRs found in dev since last tag. Skipping build." -ForegroundColor Yellow
                echo "should-build=false" >> $env:GITHUB_OUTPUT
              }
            } else {
              Write-Host "PRs found since last tag (dev): $mergeCount" -ForegroundColor Green
              Write-Host $mergedPRs

              # Check if only change is a release PR (skip in that case)
              if ($mergeCount -eq 1 -and $mergedPRs -match "from .*/release/") {
                Write-Host "Only change since last tag is a release PR. Skipping build." -ForegroundColor Yellow

                echo "should-build=false" >> $env:GITHUB_OUTPUT
              } else {
                echo "should-build=true" >> $env:GITHUB_OUTPUT
              }
            }
          }

      - name: Generate version
        id: version
        if: steps.check.outputs.should-build == 'true'
        shell: pwsh
        run: |
          # Generate version in format YY.M.D-Nightly or YY.M.D.BUILD-Nightly for Git tag
          # and YY.M.D.BUILD for MSI (Windows Installer compatible)
          $date = Get-Date -Format "yy.M.d"  # Remove leading zeros for both Git and MSI
          Write-Host "Base date: $date (unified format)" -ForegroundColor Cyan

          # Check if we already have a nightly for today (without build number)
          $baseNightlyExists = (git tag -l "v$date-Nightly" | Measure-Object).Count

          if ($baseNightlyExists -eq 0) {
            # First nightly of the day
            $gitVersion = "$date-Nightly"
            $msiVersion = "$date.1"  # Add .1 for nightly builds to distinguish from releases
            Write-Host "First nightly of the day: $gitVersion (Git) / $msiVersion (MSI)" -ForegroundColor Green
          } else {
            # Additional nightly (hotfix), find next build number
            $buildNum = 2
            while (git tag -l "v$date.$buildNum-Nightly" | Where-Object { $_ -eq "v$date.$buildNum-Nightly" }) {
              $buildNum++
            }
            $gitVersion = "$date.$buildNum-Nightly"
            $msiVersion = "$date.$buildNum"
            Write-Host "Nightly hotfix build: $gitVersion (Git) / $msiVersion (MSI)" -ForegroundColor Yellow
          }

          Write-Host "Generated Git version: $gitVersion" -ForegroundColor Green
          Write-Host "Generated MSI version: $msiVersion" -ForegroundColor Green
          echo "version=$gitVersion" >> $env:GITHUB_OUTPUT
          echo "msi_version=$msiVersion" >> $env:GITHUB_OUTPUT

  # run-tests:
  #   name: Run Tests
  #   needs: [check-changes]
  #   if: |
  #     needs.check-changes.outputs.should-build == 'true' &&
  #     ((github.event_name == 'workflow_dispatch' && github.event.inputs.skip-tests != 'true') ||
  #     (github.event_name != 'workflow_dispatch' && env.SKIP_TESTS_DEFAULT == 'false'))
  #   uses: ./.github/workflows/action_run-tests.yml
  #   with:
  #     configuration: 'Release'
  #     platforms: 'x64,x86,ARM64'
  #     generate-coverage: 'true'
  #     checkout-ref: 'dev'

  build-and-package:
    name: 🏗️ Build, Package and Create Installers
    needs: [check-changes]
    if: needs.check-changes.outputs.should-build == 'true'
    uses: ./.github/workflows/action_build-package-installers.yml
    with:
      configuration: 'Release'
      version: ${{ needs.check-changes.outputs.msi_version }}
      create-zip: 'true'
      checkout-ref: 'dev'

  create-release:
    name: 📦 Create Release
    needs: [check-changes, build-and-package]
    if: needs.check-changes.outputs.should-build == 'true'
    permissions:
      contents: write
      actions: read
      pull-requests: write
    uses: ./.github/workflows/action_release-management.yml
    with:
      version: ${{ needs.check-changes.outputs.version }}
      is-prerelease: 'true'
      artifacts-path: 'artifacts'
      checkout-ref: 'dev'
      target-branch: 'dev'
      commit-sha: ${{ needs.check-changes.outputs.commit-sha }}
      release-notes: ''
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  cleanup-old-releases:
    name: 🧹 Cleanup Old Releases
    needs: [check-changes, create-release]
    if: needs.check-changes.outputs.should-build == 'true' && success()
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Cleanup old nightly releases
        shell: pwsh
        run: |
          Write-Host "Cleaning up old nightly releases..." -ForegroundColor Cyan

          # Keep only the last 7 nightly releases
          $nightlyReleases = gh release list --limit 100 --json tagName,isPrerelease,createdAt |
            ConvertFrom-Json |
            Where-Object { $_.isPrerelease -and $_.tagName -like "*-Nightly" } |
            Sort-Object createdAt -Descending

          if ($nightlyReleases.Count -gt 7) {
            $toDelete = $nightlyReleases | Select-Object -Skip 7

            foreach ($release in $toDelete) {
              Write-Host "Deleting old nightly release: $($release.tagName)" -ForegroundColor Yellow
              try {
                gh release delete $release.tagName --yes --cleanup-tag
              } catch {
                Write-Host "Failed to delete $($release.tagName): $($_.Exception.Message)" -ForegroundColor Red
                exit 1
              }
            }

            Write-Host "Cleanup complete. Kept the 7 most recent nightly builds." -ForegroundColor Green
            exit 0
          } else {
            Write-Host "No cleanup needed. Current nightly releases: $($nightlyReleases.Count)" -ForegroundColor Green
            exit 0
          }
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: 📋 Summary
    needs: [check-changes, create-release, cleanup-old-releases]
    if: always() && needs.check-changes.outputs.should-build == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Generate summary
        shell: pwsh
        run: |
          Write-Host "# 🌙 Nightly Build Summary" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "## Build Information" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Git Version**: ${{ needs.check-changes.outputs.version }}" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **MSI Version**: ${{ needs.check-changes.outputs.msi_version }}" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Branch**: dev" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Status**: ${{ needs.create-release.result }}" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY

          if ("${{ needs.create-release.result }}" -eq "success") {
            Write-Host "✅ **Nightly build completed successfully!**" >> $env:GITHUB_STEP_SUMMARY
            Write-Host "" >> $env:GITHUB_STEP_SUMMARY
            Write-Host '[View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.check-changes.outputs.version }})' >> $env:GITHUB_STEP_SUMMARY
          } else {
            Write-Host "❌ **Nightly build failed!**" >> $env:GITHUB_STEP_SUMMARY
          }


  notify-skip:
    name: ⏭️ Notify Skip
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'false'
    runs-on: ubuntu-latest

    steps:
      - name: Skip notification
        shell: pwsh
        run: |
          Write-Host "# ⏭️ Nightly Build Skipped" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "No changes detected in the last 24 hours on the dev branch." >> $env:GITHUB_STEP_SUMMARY
          Write-Host "The nightly build has been skipped to save resources." >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "To force a build, you can:" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "1. Manually trigger this workflow with 'Force build' option" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "2. Push new commits to the dev branch" >> $env:GITHUB_STEP_SUMMARY
