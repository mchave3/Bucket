name: Nightly Build

# Global configuration - modify these to change default behavior
env:
  SKIP_TESTS_DEFAULT: true  # Set to true to skip tests by default for scheduled runs

on:
  schedule:
    # Run at 2:00 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force-build:
        description: 'Force build even if no changes'
        required: false
        type: boolean
        default: false
      skip-tests:
        description: 'Skip running tests'
        required: false
        type: boolean
        default: false

# Only run on dev branch
jobs:
  check-changes:
    name: Check for Changes
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.event_name == 'workflow_dispatch'
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      version: ${{ steps.version.outputs.version }}
      msi_version: ${{ steps.version.outputs.msi_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: dev

      - name: Check for merged PRs since last tag
        id: check
        shell: bash
        run: |
          echo "Checking for merged PRs since last tag..."

          # Get the latest release tag (any type)
          LATEST_TAG=$(git tag -l --sort=-version:refname | head -n 1)
          echo "Latest release: $LATEST_TAG"

          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found, building first nightly"
            echo "should-build=true" >> $GITHUB_OUTPUT
          else
            # Get all merged PRs since last tag (only merge commits from PRs)
            MERGED_PRS=$(git log --merges --grep="Merge pull request" --pretty=format:"%h %s" "$LATEST_TAG..dev" || echo "")

            # Count merges
            MERGE_COUNT=$(echo "$MERGED_PRS" | grep -c "Merge pull request" || echo "0")

            if [ "$MERGE_COUNT" -eq 0 ]; then
              if [ "${{ github.event.inputs.force-build }}" == "true" ]; then
                echo "No PRs merged since last tag, but force build requested"
                echo "should-build=true" >> $GITHUB_OUTPUT
              else
                echo "No PRs merged to dev since last tag. Skipping build."
                echo "should-build=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "Merged PRs since last tag (dev):"
              echo "$MERGED_PRS"

              # Check if only change is a release PR merge (skip in that case)
              if [ "$MERGE_COUNT" -eq 1 ] && echo "$MERGED_PRS" | grep -q "release/"; then
                echo "Only change since last tag is a release PR merge. Skipping build."
                echo "should-build=false" >> $GITHUB_OUTPUT
              else
                echo "should-build=true" >> $GITHUB_OUTPUT
              fi
            fi
          fi

      - name: Generate version
        id: version
        if: steps.check.outputs.should-build == 'true'
        shell: bash
        run: |
          # Generate version in format YY.MM.DD-Nightly or YY.MM.DD.BUILD-Nightly for Git tag
          # and YY.M.D.BUILD for MSI (Windows Installer compatible)
          DATE=$(date -u '+%y.%m.%d')
          DATE_MSI=$(date -u '+%y.%-m.%-d')  # Remove leading zeros for MSI compatibility
          echo "Base date: $DATE (Git tag format)"
          echo "Base date MSI: $DATE_MSI (MSI version format)"

          # Check if we already have a nightly for today (without build number)
          BASE_NIGHTLY_EXISTS=$(git tag -l "v$DATE-Nightly" | wc -l)

          if [ $BASE_NIGHTLY_EXISTS -eq 0 ]; then
            # First nightly of the day
            GIT_VERSION="$DATE-Nightly"
            MSI_VERSION="$DATE_MSI.1"  # Add .1 for nightly builds to distinguish from releases
            echo "First nightly of the day: $GIT_VERSION (Git) / $MSI_VERSION (MSI)"
          else
            # Additional nightly (hotfix), find next build number
            BUILD_NUM=2
            while git tag -l "v$DATE.$BUILD_NUM-Nightly" | grep -q "v$DATE.$BUILD_NUM-Nightly"; do
              BUILD_NUM=$((BUILD_NUM + 1))
            done
            GIT_VERSION="$DATE.$BUILD_NUM-Nightly"
            MSI_VERSION="$DATE_MSI.$BUILD_NUM"
            echo "Nightly hotfix build: $GIT_VERSION (Git) / $MSI_VERSION (MSI)"
          fi

          echo "Generated Git version: $GIT_VERSION"
          echo "Generated MSI version: $MSI_VERSION"
          echo "version=$GIT_VERSION" >> $GITHUB_OUTPUT
          echo "msi_version=$MSI_VERSION" >> $GITHUB_OUTPUT

  build-test-release:
    name: Build, Test and Release
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'true'
    runs-on: windows-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          dotnet-version: '9.0.x'

      # - name: Run tests
      #   if: |
      #     (github.event_name == 'workflow_dispatch' && github.event.inputs.skip-tests != 'true') ||
      #     (github.event_name != 'workflow_dispatch' && env.SKIP_TESTS_DEFAULT == 'false')
      #   uses: ./.github/actions/run-tests
      #   with:
      #     configuration: 'Release'
      #     platforms: 'x64,x86,ARM64'
      #     generate-coverage: 'true'

      - name: Build and package
        uses: ./.github/actions/build-and-package
        with:
          configuration: 'Release'
          version: ${{ needs.check-changes.outputs.msi_version }}
          create-zip: 'true'

      - name: Create installers
        uses: ./.github/actions/create-installers
        with:
          version: ${{ needs.check-changes.outputs.msi_version }}
          configuration: 'Release'

      - name: Create release
        uses: ./.github/actions/release-management
        with:
          version: ${{ needs.check-changes.outputs.version }}
          is-prerelease: 'true'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          artifacts-path: 'artifacts'
          release-notes: |
            This is an **automated nightly build** created from the latest changes in the dev branch.

            ⚠️ **Warning**: This build may contain unstable features and is intended for testing purposes only.

      - name: Cleanup old nightly releases
        if: success()
        shell: pwsh
        run: |
          Write-Host "Cleaning up old nightly releases..." -ForegroundColor Cyan

          # Keep only the last 7 nightly releases
          $nightlyReleases = gh release list --limit 100 --json tagName,isPrerelease,createdAt |
            ConvertFrom-Json |
            Where-Object { $_.isPrerelease -and $_.tagName -like "*-Nightly" } |
            Sort-Object createdAt -Descending

          if ($nightlyReleases.Count -gt 7) {
            $toDelete = $nightlyReleases | Select-Object -Skip 7

            foreach ($release in $toDelete) {
              Write-Host "Deleting old nightly release: $($release.tagName)"
              gh release delete $release.tagName --yes --cleanup-tag
            }

            Write-Host "Cleanup complete. Kept the 7 most recent nightly builds." -ForegroundColor Green
          } else {
            Write-Host "No cleanup needed. Current nightly releases: $($nightlyReleases.Count)" -ForegroundColor Green
          }
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: always()
        shell: pwsh
        run: |
          Write-Host "# 🌙 Nightly Build Summary" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "## Build Information" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Git Version**: ${{ needs.check-changes.outputs.version }}" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **MSI Version**: ${{ needs.check-changes.outputs.msi_version }}" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Branch**: dev" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Status**: ${{ job.status }}" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY

          if ("${{ job.status }}" -eq "success") {
            Write-Host "✅ **Nightly build completed successfully!**" >> $env:GITHUB_STEP_SUMMARY
            Write-Host "" >> $env:GITHUB_STEP_SUMMARY
            Write-Host "[View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.check-changes.outputs.version }})" >> $env:GITHUB_STEP_SUMMARY
          } else {
            Write-Host "❌ **Nightly build failed!**" >> $env:GITHUB_STEP_SUMMARY
          }

  notify-skip:
    name: Notify Skip
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'false'
    runs-on: ubuntu-latest

    steps:
      - name: Skip notification
        run: |
          echo "# ⏭️ Nightly Build Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No changes detected in the last 24 hours on the dev branch." >> $GITHUB_STEP_SUMMARY
          echo "The nightly build has been skipped to save resources." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To force a build, you can:" >> $GITHUB_STEP_SUMMARY
          echo "1. Manually trigger this workflow with 'Force build' option" >> $GITHUB_STEP_SUMMARY
          echo "2. Push new commits to the dev branch" >> $GITHUB_STEP_SUMMARY
