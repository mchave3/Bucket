name: Nightly Build

on:
  schedule:
    # Run at 2:00 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force-build:
        description: 'Force build even if no changes'
        required: false
        type: boolean
        default: false
      skip-tests:
        description: 'Skip running tests'
        required: false
        type: boolean
        default: false

# Only run on dev branch
jobs:
  check-changes:
    name: Check for Changes
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.event_name == 'workflow_dispatch'
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: dev

      - name: Check for recent changes
        id: check
        run: |
          echo "Checking for changes in the last 24 hours..."

          # Get the timestamp for 24 hours ago
          LAST_BUILD_TIME=$(date -u -d '24 hours ago' '+%Y-%m-%d %H:%M:%S')
          echo "Last build time threshold: $LAST_BUILD_TIME"

          # Check if there are commits since the last build time
          CHANGES=$(git log --since="$LAST_BUILD_TIME" --oneline)

          if [ -n "$CHANGES" ] || [ "${{ github.event.inputs.force-build }}" == "true" ]; then
            echo "Changes detected or force build requested"
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "Recent commits:"
            echo "$CHANGES"
          else
            echo "No changes detected"
            echo "should-build=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate version
        id: version
        if: steps.check.outputs.should-build == 'true'
        run: |
          # Generate version in format YY.MM.DD.BUILD-Nightly
          DATE=$(date -u '+%y.%-m.%-d')

          # Check how many builds we've done today
          BUILD_NUM=1
          EXISTING_TAGS=$(git tag -l "v$DATE.*-Nightly" | wc -l)
          if [ $EXISTING_TAGS -gt 0 ]; then
            BUILD_NUM=$((EXISTING_TAGS + 1))
          fi

          VERSION="$DATE.$BUILD_NUM-Nightly"
          echo "Generated version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-test-release:
    name: Build, Test and Release
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'true'
    runs-on: windows-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          dotnet-version: '9.0.x'

      - name: Run tests
        if: github.event.inputs.skip-tests != 'true'
        uses: ./.github/actions/run-tests
        with:
          configuration: 'Release'
          platforms: 'x64,x86,ARM64'
          generate-coverage: 'true'

      - name: Build and package
        uses: ./.github/actions/build-and-package
        with:
          configuration: 'Release'
          version: ${{ needs.check-changes.outputs.version }}
          create-zip: 'true'

      - name: Create installers
        uses: ./.github/actions/create-installers
        with:
          version: ${{ needs.check-changes.outputs.version }}
          configuration: 'Release'

      - name: Create release
        uses: ./.github/actions/release-management
        with:
          version: ${{ needs.check-changes.outputs.version }}
          is-prerelease: 'true'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          artifacts-path: 'artifacts'
          release-notes: |
            ## 🌙 Nightly Build

            This is an automated nightly build from the `dev` branch.

            ⚠️ **Warning**: This is a pre-release build and may contain bugs or incomplete features.

            ### Recent Changes
            See the [dev branch commits](https://github.com/${{ github.repository }}/commits/dev) for recent changes.

            ### Testing
            ${{ github.event.inputs.skip-tests == 'true' && '- ⚠️ Tests were skipped' || '- ✅ All unit tests passed' }}
            - ✅ Solution built successfully for all architectures
            - ✅ Installers generated successfully

      - name: Cleanup old nightly releases
        if: success()
        shell: pwsh
        run: |
          Write-Host "Cleaning up old nightly releases..." -ForegroundColor Cyan

          # Keep only the last 7 nightly releases
          $nightlyReleases = gh release list --limit 100 --json tagName,isPrerelease,createdAt |
            ConvertFrom-Json |
            Where-Object { $_.isPrerelease -and $_.tagName -like "*-Nightly" } |
            Sort-Object createdAt -Descending

          if ($nightlyReleases.Count -gt 7) {
            $toDelete = $nightlyReleases | Select-Object -Skip 7

            foreach ($release in $toDelete) {
              Write-Host "Deleting old nightly release: $($release.tagName)"
              gh release delete $release.tagName --yes --cleanup-tag
            }

            Write-Host "Cleanup complete. Kept the 7 most recent nightly builds." -ForegroundColor Green
          } else {
            Write-Host "No cleanup needed. Current nightly releases: $($nightlyReleases.Count)" -ForegroundColor Green
          }
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: always()
        shell: pwsh
        run: |
          Write-Host "# 🌙 Nightly Build Summary" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "## Build Information" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Version**: ${{ needs.check-changes.outputs.version }}" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Branch**: dev" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Status**: ${{ job.status }}" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY

          if ("${{ job.status }}" -eq "success") {
            Write-Host "✅ **Nightly build completed successfully!**" >> $env:GITHUB_STEP_SUMMARY
            Write-Host "" >> $env:GITHUB_STEP_SUMMARY
            Write-Host "[View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.check-changes.outputs.version }})" >> $env:GITHUB_STEP_SUMMARY
          } else {
            Write-Host "❌ **Nightly build failed!**" >> $env:GITHUB_STEP_SUMMARY
          }

  notify-skip:
    name: Notify Skip
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'false'
    runs-on: ubuntu-latest

    steps:
      - name: Skip notification
        run: |
          echo "# ⏭️ Nightly Build Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No changes detected in the last 24 hours on the dev branch." >> $GITHUB_STEP_SUMMARY
          echo "The nightly build has been skipped to save resources." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To force a build, you can:" >> $GITHUB_STEP_SUMMARY
          echo "1. Manually trigger this workflow with 'Force build' option" >> $GITHUB_STEP_SUMMARY
          echo "2. Push new commits to the dev branch" >> $GITHUB_STEP_SUMMARY
