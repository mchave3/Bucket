name: 'Subflow - Run Tests'
description: 'Execute unit tests for Bucket.App.Tests and Bucket.Core.Tests'
inputs:
  configuration:
    description: 'Build configuration'
    required: false
    default: 'Release'
  platforms:
    description: 'Target platforms for tests (comma-separated: x64,x86,ARM64)'
    required: false
    default: 'x64,x86,ARM64'
  test-results-path:
    description: 'Path for test results'
    required: false
    default: 'test-results'
  generate-coverage:
    description: 'Generate code coverage'
    required: false
    default: 'true'

outputs:
  test-results-path:
    description: 'Path to test results'
    value: ${{ steps.test-results.outputs.path }}
  coverage-path:
    description: 'Path to coverage results'
    value: ${{ steps.test-results.outputs.coverage }}

runs:
  using: 'composite'
  steps:
    - name: Restore dependencies
      shell: pwsh
      run: |
        Write-Host "Restoring NuGet packages..." -ForegroundColor Cyan
        dotnet restore Bucket.sln

        if ($LASTEXITCODE -ne 0) {
          Write-Error "Package restore failed!"
          exit 1
        }

    - name: Build and test all architectures
      shell: pwsh
      run: |
        $platforms = "${{ inputs.platforms }}" -split ','
        $configuration = "${{ inputs.configuration }}"
        $testResultsPath = "${{ inputs.test-results-path }}"
        $generateCoverage = "${{ inputs.generate-coverage }}"

        # Create test results directory
        New-Item -ItemType Directory -Force -Path $testResultsPath | Out-Null

        $totalErrors = 0
        $totalWarnings = 0
        $successfulPlatforms = @()
        $failedPlatforms = @()

        foreach ($platform in $platforms) {
          $platform = $platform.Trim()
          Write-Host "=====================================" -ForegroundColor Magenta
          Write-Host "Processing Platform: $platform" -ForegroundColor Magenta
          Write-Host "=====================================" -ForegroundColor Magenta

          try {
            # Build solution for this platform using dotnet build for consistency
            Write-Host "Building solution for $platform..." -ForegroundColor Cyan
            dotnet build Bucket.sln `
              --configuration $configuration `
              -p:Platform=$platform `
              --no-restore `
              --verbosity minimal

            if ($LASTEXITCODE -ne 0) {
              Write-Error "Build failed for platform $platform!"
              $failedPlatforms += $platform
              $totalErrors++
              continue
            }

            Write-Host "✅ Build successful for $platform" -ForegroundColor Green

            # Run tests for Bucket.Core.Tests
            Write-Host "Running Bucket.Core.Tests on $platform..." -ForegroundColor Yellow
            $coreTestProject = "tests/Bucket.Core.Tests/Bucket.Core.Tests.csproj"

            $testArgs = @(
              "test",
              $coreTestProject,
              "--configuration", $configuration,
              "--no-restore",
              "--no-build",
              "-p:Platform=$platform",
              "--verbosity", "normal",
              "--logger", "trx;LogFileName=Bucket.Core.Tests-$platform.trx",
              "--results-directory", $testResultsPath
            )

            if ($generateCoverage -eq "true") {
              $testArgs += "--collect:""XPlat Code Coverage"""
              $testArgs += "--"
              $testArgs += "DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura"
            }

            & dotnet $testArgs
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Bucket.Core.Tests failed on $platform!"
              $failedPlatforms += "$platform (Core.Tests)"
              $totalErrors++
            } else {
              Write-Host "✅ Bucket.Core.Tests passed on $platform" -ForegroundColor Green
            }

            # Run tests for Bucket.App.Tests
            Write-Host "Running Bucket.App.Tests on $platform..." -ForegroundColor Yellow
            $appTestProject = "tests/Bucket.App.Tests/Bucket.App.Tests.csproj"

            # For Windows-specific projects with platforms, we need to specify the Platform property
            Write-Host "Running tests for Windows-specific project with platform: $platform" -ForegroundColor Cyan

            $testArgs = @(
              "test",
              $appTestProject,
              "--configuration", $configuration,
              "--no-restore",
              "--no-build",
              "-p:Platform=$platform",
              "--verbosity", "normal",
              "--logger", "trx;LogFileName=Bucket.App.Tests-$platform.trx",
              "--results-directory", $testResultsPath
            )

            if ($generateCoverage -eq "true") {
              $testArgs += "--collect:""XPlat Code Coverage"""
              $testArgs += "--"
              $testArgs += "DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura"
            }

            Write-Host "Executing: dotnet $($testArgs -join ' ')" -ForegroundColor Gray

            & dotnet $testArgs
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Bucket.App.Tests failed on $platform!"
              $failedPlatforms += "$platform (App.Tests)"
              $totalErrors++
            } else {
              Write-Host "✅ Bucket.App.Tests passed on $platform" -ForegroundColor Green
            }

            if ($platform -notin $failedPlatforms) {
              $successfulPlatforms += $platform
            }

          } catch {
            Write-Error "Unexpected error processing platform $platform`: $($_.Exception.Message)"
            $failedPlatforms += "$platform (Exception)"
            $totalErrors++
          }

          Write-Host "Completed platform: $platform" -ForegroundColor Cyan
          Write-Host ""
        }

        # Summary
        Write-Host "=====================================" -ForegroundColor Magenta
        Write-Host "MULTI-ARCHITECTURE TEST SUMMARY" -ForegroundColor Magenta
        Write-Host "=====================================" -ForegroundColor Magenta

        Write-Host "Successful platforms: $($successfulPlatforms -join ', ')" -ForegroundColor Green
        if ($failedPlatforms.Count -gt 0) {
          Write-Host "Failed platforms: $($failedPlatforms -join ', ')" -ForegroundColor Red
        }

        Write-Host "Total errors: $totalErrors" -ForegroundColor $(if ($totalErrors -eq 0) { "Green" } else { "Red" })

        # Fail if any platform failed
        if ($totalErrors -gt 0) {
          Write-Error "One or more platforms failed testing!"
          exit 1
        }

        Write-Host "🎉 All platforms passed testing!" -ForegroundColor Green

    - name: Test Summary
      id: test-results
      shell: pwsh
      run: |
        Write-Host "=== Multi-Architecture Test Results Summary ===" -ForegroundColor Cyan

        $testResultsPath = "${{ inputs.test-results-path }}"
        $platforms = "${{ inputs.platforms }}" -split ','

        echo "path=$testResultsPath" >> $env:GITHUB_OUTPUT

        if (Test-Path $testResultsPath) {
          $trxFiles = Get-ChildItem -Path $testResultsPath -Filter "*.trx"

          Write-Host "Test Result Files by Architecture:" -ForegroundColor Yellow
          foreach ($platform in $platforms) {
            $platform = $platform.Trim()
            $platformTrxFiles = $trxFiles | Where-Object { $_.Name -like "*-$platform.trx" }

            if ($platformTrxFiles.Count -gt 0) {
              Write-Host "  📋 $platform architecture:" -ForegroundColor Green
              foreach ($trx in $platformTrxFiles) {
                Write-Host "    - $($trx.Name)" -ForegroundColor White
              }
            } else {
              Write-Host "  ⚠️ $platform architecture: No test results found" -ForegroundColor Yellow
            }
          }

          Write-Host "Total test result files: $($trxFiles.Count)" -ForegroundColor Cyan

          if ("${{ inputs.generate-coverage }}" -eq "true") {
            $coverageFiles = Get-ChildItem -Path $testResultsPath -Recurse -Filter "coverage.cobertura.xml"
            if ($coverageFiles.Count -gt 0) {
              Write-Host "Code coverage reports generated: $($coverageFiles.Count)" -ForegroundColor Green
              echo "coverage=$testResultsPath" >> $env:GITHUB_OUTPUT
            } else {
              Write-Host "No code coverage reports found" -ForegroundColor Yellow
            }
          }
        } else {
          Write-Warning "Test results directory not found: $testResultsPath"
        }

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ${{ inputs.test-results-path }}
        retention-days: 7
