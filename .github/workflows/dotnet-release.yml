name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (format: YY.MM.DD.BUILD)'
        required: true
        type: string
        default: ''
      release-notes:
        description: 'Additional release notes (markdown supported)'
        required: false
        type: string
        default: ''
      dry-run:
        description: 'Dry run (build only, no release)'
        required: false
        type: boolean
        default: false

jobs:
  validate-and-build:
    name: Validate and Build Release
    runs-on: windows-latest
    # Only allow execution from main branch
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: write
      packages: write

    outputs:
      version: ${{ steps.validate-version.outputs.version }}

    steps:
      - name: Validate branch
        run: |
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "❌ This workflow can only be run from the main branch!" >> $GITHUB_STEP_SUMMARY
            echo "Current branch: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "✅ Running from main branch" >> $GITHUB_STEP_SUMMARY

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        id: validate-version
        shell: pwsh
        run: |
          $version = "${{ github.event.inputs.version }}"

          Write-Host "Validating version: $version" -ForegroundColor Cyan

          # Validate version format (YY.MM.DD.BUILD)
          if ($version -match '^\d{1,2}\.\d{1,2}\.\d{1,2}\.\d+$') {
            Write-Host "✅ Version format is valid" -ForegroundColor Green

            # Check if this version already exists
            $existingTag = git tag -l "v$version"
            if ($existingTag) {
              Write-Error "❌ Version $version already exists as a release!"
              Write-Host "Existing releases:" -ForegroundColor Yellow
              git tag -l "v*" | Select-Object -Last 10
              exit 1
            }

            echo "version=$version" >> $env:GITHUB_OUTPUT
            Write-Host "Version validated: $version" -ForegroundColor Green
          } else {
            Write-Error "❌ Invalid version format!"
            Write-Host "Expected format: YY.MM.DD.BUILD (e.g., 25.1.15.1)" -ForegroundColor Red
            exit 1
          }

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          dotnet-version: '9.0.x'
          advanced-installer-license: ${{ secrets.ADVANCED_INSTALLER_LICENSE }}

      - name: Run tests
        uses: ./.github/actions/run-tests
        with:
          configuration: 'Release'
          generate-coverage: 'true'

      - name: Build and package
        uses: ./.github/actions/build-and-package
        with:
          configuration: 'Release'
          version: ${{ steps.validate-version.outputs.version }}
          create-zip: 'true'

      - name: Create installers
        uses: ./.github/actions/create-installers
        with:
          version: ${{ steps.validate-version.outputs.version }}
          configuration: 'Release'

      - name: Create release
        if: github.event.inputs.dry-run == 'false'
        uses: ./.github/actions/release-management
        with:
          version: ${{ steps.validate-version.outputs.version }}
          is-prerelease: 'false'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          artifacts-path: 'artifacts'
          release-notes: |
            ## 🎉 Stable Release

            This is a stable release from the `main` branch.

            ${{ github.event.inputs.release-notes }}

            ### Quality Assurance
            - ✅ All unit tests passed
            - ✅ Code review completed
            - ✅ Solution built successfully for all architectures
            - ✅ Installers validated

            ### Supported Platforms
            - Windows 10 (1809+) - x64, x86, ARM64
            - Windows 11 - x64, x86, ARM64

      - name: Dry run summary
        if: github.event.inputs.dry-run == 'true'
        shell: pwsh
        run: |
          Write-Host "=== DRY RUN COMPLETED ===" -ForegroundColor Yellow
          Write-Host "Build and packaging completed successfully!" -ForegroundColor Green
          Write-Host "No release was created (dry run mode)" -ForegroundColor Yellow

          $summary = @"
          # 🧪 Dry Run Completed

          ## Build Results
          - **Version**: ${{ steps.validate-version.outputs.version }}
          - **Configuration**: Release
          - **Status**: ✅ Success

          ## Generated Artifacts
          "@

          # List ZIP packages
          $zipPath = "artifacts/zip"
          if (Test-Path $zipPath) {
            $summary += "`n`n### ZIP Packages"
            Get-ChildItem -Path $zipPath -Filter "*.zip" | ForEach-Object {
              $summary += "`n- ``$($_.Name)`` ($('{0:N2} MB' -f ($_.Length / 1MB)))"
            }
          }

          # List MSI installers
          $installersPath = "artifacts/installers"
          if (Test-Path $installersPath) {
            $summary += "`n`n### MSI Installers"
            Get-ChildItem -Path $installersPath -Filter "*.msi" | ForEach-Object {
              $summary += "`n- ``$($_.Name)`` ($('{0:N2} MB' -f ($_.Length / 1MB)))"
            }
          }

          $summary += @"


          ## Next Steps
          To create the actual release, run this workflow again with:
          - **Dry run**: ``false``
          - **Version**: ``${{ steps.validate-version.outputs.version }}``
          "@

          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8 -Append

      - name: Create release tag
        if: github.event.inputs.dry-run == 'false'
        shell: pwsh
        run: |
          # Create and push tag for tracking
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # The tag should already be created by the release action, but we ensure it's pushed
          git fetch --tags

          Write-Host "Release created successfully!" -ForegroundColor Green
          Write-Host "Version: ${{ steps.validate-version.outputs.version }}" -ForegroundColor Cyan

      - name: Post-release summary
        if: github.event.inputs.dry-run == 'false'
        run: |
          echo "# 🚀 Release Published Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`${{ steps.validate-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: Stable Release" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: main" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Published Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- 3 MSI installers (x64, x86, ARM64)" >> $GITHUB_STEP_SUMMARY
          echo "- 3 ZIP packages (x64, x86, ARM64)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[**View Release →**](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.validate-version.outputs.version }})" >> $GITHUB_STEP_SUMMARY

  guard-branch:
    name: Branch Protection
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'

    steps:
      - name: Block execution
        run: |
          echo "# ⛔ Workflow Blocked" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This workflow can only be executed from the **main** branch." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Current branch**: \`${{ github.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Required branch**: \`refs/heads/main\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Switch to the main branch" >> $GITHUB_STEP_SUMMARY
          echo "2. Ensure your code is merged and up-to-date" >> $GITHUB_STEP_SUMMARY
          echo "3. Run this workflow again from the main branch" >> $GITHUB_STEP_SUMMARY

          exit 1
