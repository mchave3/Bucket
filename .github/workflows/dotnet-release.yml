name: 🚀 Release Build

# Global configuration - modify these to change default behavior
env:
  SKIP_TESTS_DEFAULT: true  # Set to true to skip tests by default

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (format: YY.M.D or YY.M.D.BUILD for hotfixes) - MSI will get .1 for first releases'
        required: true
        type: string
        default: ''
      release-notes:
        description: 'Additional release notes (markdown supported)'
        required: false
        type: string
        default: ''
      dry-run:
        description: 'Dry run (build only, no release)'
        required: false
        type: boolean
        default: false
      skip-tests:
        description: 'Skip running tests'
        required: false
        type: boolean
        default: false

jobs:
  validate-version:
    name: ✅ Validate Version
    runs-on: ubuntu-latest
    # Only allow execution from main branch
    if: github.ref == 'refs/heads/main'

    outputs:
      version: ${{ steps.validate-version.outputs.version }}
      msi_version: ${{ steps.validate-version.outputs.msi_version }}

    steps:
      - name: Validate branch
        shell: pwsh
        run: |
          if ("${{ github.ref }}" -ne "refs/heads/main") {
            Write-Host "❌ This workflow can only be run from the main branch!" >> $env:GITHUB_STEP_SUMMARY
            Write-Host "Current branch: ${{ github.ref }}" >> $env:GITHUB_STEP_SUMMARY
            exit 1
          }
          Write-Host "✅ Running from main branch" >> $env:GITHUB_STEP_SUMMARY

      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Validate version format
        id: validate-version
        shell: pwsh
        run: |
          $inputVersion = "${{ github.event.inputs.version }}"
          Write-Host "Validating version: $inputVersion" -ForegroundColor Cyan

          # Validate version format (YY.M.D or YY.M.D.BUILD)
          if ($inputVersion -match '^(\d{1,2})\.(\d{1,2})\.(\d{1,2})(\.(\d+))?$') {
            Write-Host "✅ Version format is valid" -ForegroundColor Green

            # Check if this version already exists
            $existingTag = git tag -l "v$inputVersion"
            if ($existingTag) {
              Write-Error "❌ Version $inputVersion already exists as a release!"
              Write-Host "Existing releases:" -ForegroundColor Yellow
              git tag -l "v*" | Select-Object -Last 10
              exit 1
            }

            # Generate MSI version based on input format
            if ($inputVersion -match '^(\d{1,2})\.(\d{1,2})\.(\d{1,2})$') {
              # First release (YY.M.D format) - Add .1 for MSI like nightlies
              $msiVersion = "$inputVersion.1"
              Write-Host "First release detected - MSI version will include .1 suffix" -ForegroundColor Yellow
            } else {
              # Hotfix release (YY.M.D.BUILD format) - Use as-is
              $msiVersion = $inputVersion
              Write-Host "Hotfix release detected - MSI version matches input" -ForegroundColor Yellow
            }

            echo "version=$inputVersion" >> $env:GITHUB_OUTPUT
            echo "msi_version=$msiVersion" >> $env:GITHUB_OUTPUT
            Write-Host "Git version: $inputVersion" -ForegroundColor Green
            Write-Host "MSI version: $msiVersion" -ForegroundColor Green
          } else {
            Write-Error "❌ Invalid version format!"
            Write-Host "Expected formats:" -ForegroundColor Red
            Write-Host "- Initial release: YY.M.D (e.g., 25.1.15) → MSI: YY.M.D.1" -ForegroundColor Red
            Write-Host "- Hotfix: YY.M.D.BUILD (e.g., 25.1.15.2) → MSI: YY.M.D.BUILD" -ForegroundColor Red
            exit 1
          }

  # run-tests:
  #   name: Run Tests
  #   needs: [validate-version]
  #   if: |
  #     github.ref == 'refs/heads/main' &&
  #     ((github.event_name == 'workflow_dispatch' && github.event.inputs.skip-tests != 'true') ||
  #     (github.event_name != 'workflow_dispatch' && env.SKIP_TESTS_DEFAULT == 'false'))
  #   uses: ./.github/workflows/action_run-tests.yml
  #   with:
  #     configuration: 'Release'
  #     platforms: 'x64,x86,ARM64'
  #     generate-coverage: 'true'
  #     checkout-ref: 'main'

  build-and-package:
    name: 🏗️ Build, Package and Create Installers
    needs: [validate-version]
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/action_build-package-installers.yml
    with:
      configuration: 'Release'
      version: ${{ needs.validate-version.outputs.msi_version }}
      create-zip: 'true'
      checkout-ref: 'main'

  create-release:
    name: 📦 Create Release
    needs: [validate-version, build-and-package]
    if: github.ref == 'refs/heads/main' && github.event.inputs.dry-run == 'false'
    permissions:
      contents: write
      actions: read
      pull-requests: write
    uses: ./.github/workflows/action_release-management.yml
    with:
      version: ${{ needs.validate-version.outputs.version }}
      is-prerelease: 'false'
      artifacts-path: 'artifacts'
      checkout-ref: 'main'
      target-branch: 'main'
      release-notes: |
        ${{ github.event.inputs.release-notes }}
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  dry-run-summary:
    name: 🧪 Dry Run Summary
    needs: [validate-version, build-and-package]
    if: github.ref == 'refs/heads/main' && github.event.inputs.dry-run == 'true'
    runs-on: ubuntu-latest

    steps:

      - name: Generate dry run summary
        shell: pwsh
        run: |
          Write-Host "=== DRY RUN COMPLETED ===" -ForegroundColor Yellow
          Write-Host "Build and packaging completed successfully!" -ForegroundColor Green
          Write-Host "No release was created (dry run mode)" -ForegroundColor Yellow

          Write-Host "# 🧪 Dry Run Completed" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "## Build Results" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Version**: ${{ needs.validate-version.outputs.version }}" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Configuration**: Release" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Status**: ✅ Success" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "## Generated Artifacts" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "### MSI Installers" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- MSI installers for x64, x86, and ARM64 architectures have been built" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "## Next Steps" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "To create the actual release, run this workflow again with:" >> $env:GITHUB_STEP_SUMMARY
          Write-Host '- **Dry run**: `false`' >> $env:GITHUB_STEP_SUMMARY
          Write-Host '- **Version**: `${{ needs.validate-version.outputs.version }}`' >> $env:GITHUB_STEP_SUMMARY

  post-release-summary:
    name: 📋 Post Release Summary
    needs: [validate-version, create-release]
    if: github.ref == 'refs/heads/main' && github.event.inputs.dry-run == 'false' && success()
    runs-on: ubuntu-latest

    steps:
      - name: Generate post-release summary
        shell: pwsh
        run: |
          Write-Host "Release created successfully!" -ForegroundColor Green
          Write-Host "Version: ${{ needs.validate-version.outputs.version }}" -ForegroundColor Cyan

          Write-Host "# 🚀 Release Published Successfully!" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "## Release Information" >> $env:GITHUB_STEP_SUMMARY
          Write-Host '- **Version**: `${{ needs.validate-version.outputs.version }}`' >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Type**: Stable Release" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Branch**: main" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "## 📦 Published Artifacts" >> $env:GITHUB_STEP_SUMMARY
          Write-Host '- 3 MSI installers (x64, x86, ARM64)' >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host '📝 **Note**: ZIP packages are built for internal use but not published in releases.' >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host '[**View Release →**](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-version.outputs.version }})' >> $env:GITHUB_STEP_SUMMARY

  guard-branch:
    name: ⛔ Branch Protection
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'

    steps:
      - name: Block execution
        shell: pwsh
        run: |
          Write-Host "# ⛔ Workflow Blocked" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "This workflow can only be executed from the **main** branch." >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host '**Current branch**: `${{ github.ref }}`' >> $env:GITHUB_STEP_SUMMARY
          Write-Host '**Required branch**: `refs/heads/main`' >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "## Next Steps" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "1. Switch to the main branch" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "2. Ensure your code is merged and up-to-date" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "3. Run this workflow again from the main branch" >> $env:GITHUB_STEP_SUMMARY

          exit 1
