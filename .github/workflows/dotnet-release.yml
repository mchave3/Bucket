name: Release Build

# Global configuration - modify these to change default behavior
env:
  SKIP_TESTS_DEFAULT: true  # Set to true to skip tests by default

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (format: YY.MM.DD or YY.MM.DD.BUILD for hotfixes)'
        required: true
        type: string
        default: ''
      release-notes:
        description: 'Additional release notes (markdown supported)'
        required: false
        type: string
        default: ''
      dry-run:
        description: 'Dry run (build only, no release)'
        required: false
        type: boolean
        default: false
      skip-tests:
        description: 'Skip running tests'
        required: false
        type: boolean
        default: false

jobs:
  validate-and-build:
    name: Validate and Build Release
    runs-on: windows-latest
    # Only allow execution from main branch
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: write
      packages: write

    outputs:
      version: ${{ steps.validate-version.outputs.version }}
      msi_version: ${{ steps.validate-version.outputs.msi_version }}

    steps:
      - name: Validate branch
        shell: pwsh
        run: |
          if ("${{ github.ref }}" -ne "refs/heads/main") {
            Write-Host "❌ This workflow can only be run from the main branch!" >> $env:GITHUB_STEP_SUMMARY
            Write-Host "Current branch: ${{ github.ref }}" >> $env:GITHUB_STEP_SUMMARY
            exit 1
          }
          Write-Host "✅ Running from main branch" >> $env:GITHUB_STEP_SUMMARY

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        id: validate-version
        shell: pwsh
        run: |
          $inputVersion = "${{ github.event.inputs.version }}"

          Write-Host "Validating version: $inputVersion" -ForegroundColor Cyan

          # Validate version format (YY.MM.DD or YY.MM.DD.BUILD)
          if ($inputVersion -match '^(\d{1,2})\.(\d{1,2})\.(\d{1,2})(\.(\d+))?$') {
            Write-Host "✅ Version format is valid" -ForegroundColor Green

            # Check if this version already exists
            $existingTag = git tag -l "v$inputVersion"
            if ($existingTag) {
              Write-Error "❌ Version $inputVersion already exists as a release!"
              Write-Host "Existing releases:" -ForegroundColor Yellow
              git tag -l "v*" | Select-Object -Last 10
              exit 1
            }

            # Generate MSI-compatible version (ensure no leading zeros)
            $year = [int]$matches[1]
            $month = [int]$matches[2]
            $day = [int]$matches[3]
            $build = if ($matches[5]) { [int]$matches[5] } else { $null }

            $msiVersion = "$year.$month.$day"
            if ($build -ne $null) {
              $msiVersion += ".$build"
            }

            echo "version=$inputVersion" >> $env:GITHUB_OUTPUT
            echo "msi_version=$msiVersion" >> $env:GITHUB_OUTPUT
            Write-Host "Git version: $inputVersion" -ForegroundColor Green
            Write-Host "MSI version: $msiVersion" -ForegroundColor Green
          } else {
            Write-Error "❌ Invalid version format!"
            Write-Host "Expected formats:" -ForegroundColor Red
            Write-Host "- Initial release: YY.MM.DD (e.g., 25.01.15)" -ForegroundColor Red
            Write-Host "- Hotfix: YY.MM.DD.BUILD (e.g., 25.01.15.2)" -ForegroundColor Red
            exit 1
          }

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          dotnet-version: '9.0.x'

      # - name: Run tests
      #   if: |
      #     (github.event_name == 'workflow_dispatch' && github.event.inputs.skip-tests != 'true') ||
      #     (github.event_name != 'workflow_dispatch' && env.SKIP_TESTS_DEFAULT == 'false')
      #   uses: ./.github/actions/run-tests
      #   with:
      #     configuration: 'Release'
      #     platforms: 'x64,x86,ARM64'
      #     generate-coverage: 'true'

      - name: Build and package
        uses: ./.github/actions/build-and-package
        with:
          configuration: 'Release'
          version: ${{ steps.validate-version.outputs.msi_version }}
          create-zip: 'true'

      - name: Create installers
        uses: ./.github/actions/create-installers
        with:
          version: ${{ steps.validate-version.outputs.msi_version }}
          configuration: 'Release'

      - name: Create release
        if: github.event.inputs.dry-run == 'false'
        uses: ./.github/actions/release-management
        with:
          version: ${{ steps.validate-version.outputs.version }}
          is-prerelease: 'false'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          artifacts-path: 'artifacts'
          release-notes: |
            ${{ github.event.inputs.release-notes }}

      - name: Dry run summary
        if: github.event.inputs.dry-run == 'true'
        shell: pwsh
        run: |
          Write-Host "=== DRY RUN COMPLETED ===" -ForegroundColor Yellow
          Write-Host "Build and packaging completed successfully!" -ForegroundColor Green
          Write-Host "No release was created (dry run mode)" -ForegroundColor Yellow

          $summary = @"
          # 🧪 Dry Run Completed

          ## Build Results
          - **Version**: ${{ steps.validate-version.outputs.version }}
          - **Configuration**: Release
          - **Status**: ✅ Success

          ## Generated Artifacts
          "@

          # ZIP packages are built but not listed in dry-run (internal use only)

          # List MSI installers
          $installersPath = "artifacts/installers"
          if (Test-Path $installersPath) {
            $summary += "`n`n### MSI Installers"
            Get-ChildItem -Path $installersPath -Filter "*.msi" | ForEach-Object {
              $summary += "`n- ``$($_.Name)`` ($('{0:N2} MB' -f ($_.Length / 1MB)))"
            }
          }

          $summary += @"


          ## Next Steps
          To create the actual release, run this workflow again with:
          - **Dry run**: ``false``
          - **Version**: ``${{ steps.validate-version.outputs.version }}``
          "@

          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8 -Append

      - name: Create release tag
        if: github.event.inputs.dry-run == 'false'
        shell: pwsh
        run: |
          # Create and push tag for tracking
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # The tag should already be created by the release action, but we ensure it's pushed
          git fetch --tags

          Write-Host "Release created successfully!" -ForegroundColor Green
          Write-Host "Version: ${{ steps.validate-version.outputs.version }}" -ForegroundColor Cyan

      - name: Post-release summary
        if: github.event.inputs.dry-run == 'false'
        shell: pwsh
        run: |
          Write-Host "# 🚀 Release Published Successfully!" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "## Release Information" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Version**: ``${{ steps.validate-version.outputs.version }}``" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Type**: Stable Release" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Branch**: main" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "## 📦 Published Artifacts" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- 3 MSI installers (x64, x86, ARM64)" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "📝 **Note**: ZIP packages are built for internal use but not published in releases." >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "[**View Release →**](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.validate-version.outputs.version }})" >> $env:GITHUB_STEP_SUMMARY

  guard-branch:
    name: Branch Protection
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'

    steps:
      - name: Block execution
        run: |
          echo "# ⛔ Workflow Blocked" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This workflow can only be executed from the **main** branch." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Current branch**: \`${{ github.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Required branch**: \`refs/heads/main\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Switch to the main branch" >> $GITHUB_STEP_SUMMARY
          echo "2. Ensure your code is merged and up-to-date" >> $GITHUB_STEP_SUMMARY
          echo "3. Run this workflow again from the main branch" >> $GITHUB_STEP_SUMMARY

          exit 1
