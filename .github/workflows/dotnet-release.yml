name: 🚀 Release Publisher

# This workflow builds stable releases from the configured TARGET_BRANCH
# - Triggered: Manual trigger only
# - Source branch: Defined by env.TARGET_BRANCH (currently 'main')
# - Release type: Stable release (not pre-release)
on:
  workflow_dispatch:

permissions:
  contents: write
  actions: read

# ============================================================================
# ENVIRONMENT CONFIGURATION
# ============================================================================
env:
  # Branch Configuration
  TARGET_BRANCH: main  # Source branch for stable releases

  # Project Configuration
  PROJECT_PATH: src/Bucket.App/Bucket.App.csproj
  APP_NAME: Bucket

  # Build Configuration
  PUBLISH_OUTPUT_FOLDER: Publish
  BUILD_CONFIGURATION: Release

  # .NET Publish Settings
  PUBLISH_SELF_CONTAINED: true
  PUBLISH_SINGLE_FILE: false
  PUBLISH_READY_TO_RUN: true
  PUBLISH_AOT: false
  PUBLISH_TRIMMED: true
  PUBLISH_TRIM_MODE: partial

  # Release Configuration
  SKIP_IF_RELEASE_EXISTS: true
  ALLOW_UPDATES: false

  # NuGet Sources (disabled by default)
  IS_COMMUNITY_TOOLKIT_ENABLED: false
  IS_CUSTOM_NUGET_ENABLED: false
  CUSTOM_NUGET_SOURCES: ''

# ============================================================================
# JOBS PIPELINE
# ============================================================================
jobs:
  # ──────────────────────────────────────────────────────────────────────────
  # 📋 RELEASE PREPARATION JOB
  # ──────────────────────────────────────────────────────────────────────────
  release-preparation:
    name: 📋 Prepare Release
    runs-on: windows-latest
    outputs:
      app-version: ${{ steps.version.outputs.version }}
      is-pre-release: 'false'
      make-latest: 'true'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}  # Always use target branch for stable releases
          fetch-depth: 0

      - name: 🏷️ Generate Release Version
        run: |
          echo "🏷️ Generating release version..."

          $date = Get-Date
          $year = $date.ToString("yy")
          $month = $date.Month
          $day = $date.Day

          # Get today's existing stable releases to calculate build number
          try {
            $existingReleases = gh api repos/${{ github.repository }}/releases --paginate |
              ConvertFrom-Json |
              Where-Object { $_.tag_name -match "^$year\.$month\.$day\.(\d+)$" -and $_.prerelease -eq $false }

            $buildNumber = 1
            if ($existingReleases) {
              $buildNumber = ($existingReleases |
                ForEach-Object { [int]($_.tag_name -replace "^$year\.$month\.$day\.(\d+)$", '$1') } |
                Measure-Object -Maximum).Maximum + 1
            }
          } catch {
            Write-Host "⚠️ Could not fetch existing releases, using build number 1"
            $buildNumber = 1
          }

          $newVersion = "$year.$month.$day.$buildNumber"
          Write-Host "🏷️ Generated release version: $newVersion"

          # Update project file
          $csprojPath = "${{ env.PROJECT_PATH }}"
          $content = Get-Content $csprojPath -Raw
          $content = $content -replace '<Version>.*?</Version>', "<Version>$newVersion</Version>"
          Set-Content -Path $csprojPath -Value $content

          # Verify the version was updated correctly
          $updatedContent = Get-Content $csprojPath -Raw
          if ($updatedContent -match '<Version>(.*?)</Version>') {
            $actualVersion = $matches[1]
            if ($actualVersion -eq $newVersion) {
              Write-Host "✅ Project version successfully updated to: $actualVersion"
            } else {
              Write-Host "⚠️ Version mismatch! Expected: $newVersion, Found: $actualVersion"
            }
          } else {
            Write-Host "❌ Could not find Version element in project file"
          }
        env:
          GH_TOKEN: ${{ github.token }}

      - name: 📖 Read Project Version
        uses: kzrnm/get-net-sdk-project-versions-action@v2
        id: version
        with:
          proj-path: ${{ env.PROJECT_PATH }}

      - name: ⚙️ Configure Release Settings
        id: release-config
        run: |
          echo "⚙️ Configuring release settings..."

          Write-Host "📋 Release Configuration:"
          Write-Host "  • Version: [Version will be read from project file]"
          Write-Host "  • Version Suffix: (none - auto-generated)"
          Write-Host "  • Pre-release: false (stable release)"
          Write-Host "  • Make Latest: true"
          Write-Host "  • Mode: Automatic (no user inputs)"

      - name: 🔗 Upload Release Configuration
        uses: actions/upload-artifact@v4
        with:
          name: release-config
          path: ${{ env.PROJECT_PATH }}
          retention-days: 1

  # ──────────────────────────────────────────────────────────────────────────
  # 🧪 COMPREHENSIVE TESTING JOB (USING REUSABLE ACTION)
  # ──────────────────────────────────────────────────────────────────────────
  comprehensive-testing:
    name: 🧪 Test (${{ matrix.platform }})
    runs-on: windows-latest
    needs: release-preparation

    strategy:
      matrix:
        platform: [x86, x64, ARM64]
      fail-fast: false

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}  # Always use target branch for stable releases

      - name: 🔗 Download Release Configuration
        uses: actions/download-artifact@v4
        with:
          name: release-config
          path: .

      - name: 🔧 Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          enable-community-toolkit: ${{ env.IS_COMMUNITY_TOOLKIT_ENABLED }}
          enable-custom-nuget: ${{ env.IS_CUSTOM_NUGET_ENABLED }}
          custom-nuget-sources: ${{ env.CUSTOM_NUGET_SOURCES }}

      - name: 🧪 Run Comprehensive Tests
        uses: ./.github/actions/run-tests
        with:
          platform: ${{ matrix.platform }}
          build-configuration: ${{ env.BUILD_CONFIGURATION }}
          collect-coverage: true
          test-verbosity: detailed

      - name: 📤 Upload Test Results & Coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: release-test-results-${{ matrix.platform }}
          path: TestResults
          retention-days: 90

  # ──────────────────────────────────────────────────────────────────────────
  # 🏗️ PRODUCTION BUILD JOB (USING REUSABLE ACTION)
  # ──────────────────────────────────────────────────────────────────────────
  production-build:
    name: 🏗️ Build (${{ matrix.platform }})
    runs-on: windows-latest
    needs: [release-preparation, comprehensive-testing]

    strategy:
      matrix:
        platform: [x86, x64, ARM64]
      fail-fast: false

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}  # Always use target branch for stable releases

      - name: 🔗 Download Release Configuration
        uses: actions/download-artifact@v4
        with:
          name: release-config
          path: .

      - name: 🔧 Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          enable-community-toolkit: ${{ env.IS_COMMUNITY_TOOLKIT_ENABLED }}
          enable-custom-nuget: ${{ env.IS_CUSTOM_NUGET_ENABLED }}
          custom-nuget-sources: ${{ env.CUSTOM_NUGET_SOURCES }}

      - name: 🏗️ Build and Package for Production
        uses: ./.github/actions/build-and-package
        with:
          project-path: ${{ env.PROJECT_PATH }}
          platform: ${{ matrix.platform }}
          app-name: ${{ env.APP_NAME }}
          app-version: ${{ needs.release-preparation.outputs.app-version }}
          build-configuration: ${{ env.BUILD_CONFIGURATION }}
          output-folder: ${{ env.PUBLISH_OUTPUT_FOLDER }}
          self-contained: ${{ env.PUBLISH_SELF_CONTAINED }}
          single-file: ${{ env.PUBLISH_SINGLE_FILE }}
          ready-to-run: ${{ env.PUBLISH_READY_TO_RUN }}
          aot: ${{ env.PUBLISH_AOT }}
          trimmed: ${{ env.PUBLISH_TRIMMED }}
          trim-mode: ${{ env.PUBLISH_TRIM_MODE }}

      - name: 📤 Upload Production Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-package-${{ matrix.platform }}
          path: ${{ env.APP_NAME }}-${{ needs.release-preparation.outputs.app-version }}-${{ matrix.platform }}.zip
          retention-days: 90

  # ──────────────────────────────────────────────────────────────────────────
  # 🚀 RELEASE PUBLICATION JOB (USING REUSABLE ACTION)
  # ──────────────────────────────────────────────────────────────────────────
  release-publication:
    name: 🚀 Publish Release
    runs-on: ubuntu-latest
    needs: [release-preparation, comprehensive-testing, production-build]

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}  # Always use target branch for stable releases
          fetch-depth: 0

      - name: 📦 Download All Production Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-package-*
          merge-multiple: true

      - name: 🚀 Manage Release Publication
        uses: ./.github/actions/release-management
        with:
          app-name: ${{ env.APP_NAME }}
          app-version: ${{ needs.release-preparation.outputs.app-version }}
          release-name: 🚀 Release
          is-prerelease: ${{ needs.release-preparation.outputs.is-pre-release }}
          make-latest: ${{ needs.release-preparation.outputs.make-latest }}
          skip-if-exists: ${{ env.SKIP_IF_RELEASE_EXISTS }}
          allow-updates: ${{ env.ALLOW_UPDATES }}
          artifacts-pattern: "${{ env.APP_NAME }}-${{ needs.release-preparation.outputs.app-version }}-*.zip"
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # ──────────────────────────────────────────────────────────────────────────
  # 📊 RELEASE SUMMARY JOB
  # ──────────────────────────────────────────────────────────────────────────
  release-summary:
    name: 📊 Release Summary
    runs-on: ubuntu-latest
    needs: [release-preparation, comprehensive-testing, production-build, release-publication]
    if: always()

    steps:
      - name: 📊 Generate Release Summary
        run: |
          echo "# 🚀 Release Publication Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Generated on $(date +'%Y-%m-%d at %H:%M:%S UTC')*" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall Status
          echo "## 🎯 Overall Status" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.release-preparation.result }}" == "success" && "${{ needs.comprehensive-testing.result }}" == "success" && "${{ needs.production-build.result }}" == "success" && "${{ needs.release-publication.result }}" == "success" ]]; then
            echo "### ✅ **RELEASE SUCCESSFUL**" >> $GITHUB_STEP_SUMMARY
            echo "🎉 All pipeline stages completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ **RELEASE FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "💥 One or more pipeline stages failed - check individual job logs" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Pipeline Status
          echo "## 🔄 Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Reusable Action | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|-----------------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📋 Preparation | ${{ needs.release-preparation.result == 'success' && '✅ Success' || '❌ Failed' }} | Built-in | Version generation |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Testing | ${{ needs.comprehensive-testing.result == 'success' && '✅ Success' || '❌ Failed' }} | \`run-tests\` | With coverage |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ Build | ${{ needs.production-build.result == 'success' && '✅ Success' || '❌ Failed' }} | \`build-and-package\` | Production build |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Publication | ${{ needs.release-publication.result == 'success' && '✅ Success' || '❌ Failed' }} | \`release-management\` | Full automation |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Release Information
          if [[ "${{ needs.release-publication.result }}" == "success" ]]; then
            echo "## 📦 Release Information" >> $GITHUB_STEP_SUMMARY
            echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Version** | \`${{ needs.release-preparation.outputs.app-version }}\` |" >> $GITHUB_STEP_SUMMARY

            if [[ "${{ needs.release-preparation.outputs.is-pre-release }}" == "true" ]]; then
              echo "| **Type** | 🧪 Pre-release |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| **Type** | 🏷️ Stable Release |" >> $GITHUB_STEP_SUMMARY
            fi

            echo "| **Latest** | ${{ needs.release-preparation.outputs.make-latest == 'true' && '✅ Yes' || '❌ No' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Platforms** | x86, x64, ARM64 |" >> $GITHUB_STEP_SUMMARY
            echo "| **Triggered by** | ${{ github.actor }} (Manual) |" >> $GITHUB_STEP_SUMMARY
            echo "| **Mode** | Automatic (no user inputs) |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Download Information
            echo "## 📥 Download Information" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **[View Release on GitHub](https://github.com/${{ github.repository }}/releases/tag/${{ needs.release-preparation.outputs.app-version }})**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Available Downloads:" >> $GITHUB_STEP_SUMMARY
            echo "- 📁 [Windows x86 (32-bit)](https://github.com/${{ github.repository }}/releases/download/${{ needs.release-preparation.outputs.app-version }}/Bucket-${{ needs.release-preparation.outputs.app-version }}-x86.zip)" >> $GITHUB_STEP_SUMMARY
            echo "- 📁 [Windows x64 (64-bit)](https://github.com/${{ github.repository }}/releases/download/${{ needs.release-preparation.outputs.app-version }}/Bucket-${{ needs.release-preparation.outputs.app-version }}-x64.zip)" >> $GITHUB_STEP_SUMMARY
            echo "- 📁 [Windows ARM64](https://github.com/${{ github.repository }}/releases/download/${{ needs.release-preparation.outputs.app-version }}/Bucket-${{ needs.release-preparation.outputs.app-version }}-ARM64.zip)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Architecture Benefits
          echo "## 🏗️ Architecture Benefits" >> $GITHUB_STEP_SUMMARY
          echo "- **🔧 Setup Environment**: Centralized .NET + NuGet configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **🧪 Run Tests**: Comprehensive testing with code coverage" >> $GITHUB_STEP_SUMMARY
          echo "- **📦 Build & Package**: Production-ready build and packaging" >> $GITHUB_STEP_SUMMARY
          echo "- **🚀 Release Management**: Automated tagging, changelog, and publishing" >> $GITHUB_STEP_SUMMARY
          echo "- **♻️ Reusability**: Shared actions reduce duplication by ~70%" >> $GITHUB_STEP_SUMMARY
          echo "- **🔧 Maintainability**: Single source of truth for common operations" >> $GITHUB_STEP_SUMMARY
          echo "- **🧪 Testability**: Actions can be tested independently" >> $GITHUB_STEP_SUMMARY
          echo "- **📈 Scalability**: Easy to add new platforms or configurations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Technical Configuration
          echo "## ⚙️ Technical Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ env.PROJECT_PATH }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Configuration**: ${{ env.BUILD_CONFIGURATION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Self-contained**: ${{ env.PUBLISH_SELF_CONTAINED }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ready to Run**: ${{ env.PUBLISH_READY_TO_RUN }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trimmed**: ${{ env.PUBLISH_TRIMMED }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AOT**: ${{ env.PUBLISH_AOT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Retention**: 365 days (production)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*🤖 Automated Release Pipeline - Modular, Maintainable & Reusable*" >> $GITHUB_STEP_SUMMARY
