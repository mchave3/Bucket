name: 'ðŸ“¦ Subflow - Release Management'

on:
  workflow_call:
    inputs:
      version:
        description: 'Version for the release'
        required: true
        type: string
      is-prerelease:
        description: 'Whether this is a pre-release'
        required: false
        type: string
        default: 'false'
      release-notes:
        description: 'Release notes content'
        required: false
        type: string
        default: ''
      artifacts-path:
        description: 'Path to artifacts to upload'
        required: false
        type: string
        default: 'artifacts'
      checkout-ref:
        description: 'Git reference to checkout'
        required: false
        type: string
        default: ''
    secrets:
      github-token:
        description: 'GitHub token for creating release'
        required: true
    outputs:
      release-url:
        description: 'URL of the created release'
        value: ${{ jobs.release-management.outputs.release-url }}
      release-id:
        description: 'ID of the created release'
        value: ${{ jobs.release-management.outputs.release-id }}

jobs:
  release-management:
    name: Release Management
    runs-on: ubuntu-latest
    outputs:
      release-url: ${{ steps.create-release.outputs.html_url }}
      release-id: ${{ steps.create-release.outputs.id }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ inputs.checkout-ref || github.ref }}

    - name: Download build artifacts (includes installers)
      uses: actions/download-artifact@v5
      with:
        name: build-artifacts
        path: ${{ inputs.artifacts-path }}/

    - name: Calculate file hashes and generate body
      id: calculate-hashes
      shell: pwsh
      run: |
        Write-Host "=== Calculating File Hashes and Generating Body ===" -ForegroundColor Cyan

        $version = "${{ inputs.version }}"
        $repository = "${{ github.repository }}"

        # Start building the table
        $tableRows = @()

        # Process MSI files
        $installersPath = "${{ inputs.artifacts-path }}/installers"
        if (Test-Path $installersPath) {
          Get-ChildItem -Path $installersPath -Filter "*.msi" | Sort-Object Name | ForEach-Object {
            $hash = (Get-FileHash $_.FullName -Algorithm SHA256).Hash
            Write-Host "MSI: $($_.Name) = $hash" -ForegroundColor Yellow

            $fileName = $_.Name
            $downloadUrl = "https://github.com/$repository/releases/download/v$version/$fileName"
            $badgeUrl = "https://img.shields.io/github/downloads/$repository/v$version/$fileName"

            $tableRows += "|[$fileName]($downloadUrl)|``$hash``|<picture>![$fileName]($badgeUrl`?style=flat-square&label=&color=blue)</picture>|"
          }
        }


        # Create the complete table
        $filesTable = @"
        ## Files
        |Files|Hash (SHA256)|Downloads|
        |---|---|---|
        $($tableRows -join "`n")
        "@

        # Save the table to output
        $filesTable | Out-File -FilePath "files-table.md" -Encoding UTF8
        echo "files_table<<EOF" >> $env:GITHUB_OUTPUT
        echo $filesTable >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHUB_OUTPUT

        Write-Host "File hashes calculated and table generated" -ForegroundColor Green

    - name: Collect artifacts for upload
      id: collect-artifacts
      shell: pwsh
      run: |
        Write-Host "=== Collecting Artifacts ===" -ForegroundColor Cyan

        $artifacts = @()


        # Collect MSI files
        $installersPath = "${{ inputs.artifacts-path }}/installers"
        if (Test-Path $installersPath) {
          Get-ChildItem -Path $installersPath -Filter "*.msi" | ForEach-Object {
            $artifacts += $_.FullName
            Write-Host "Added MSI: $($_.Name)" -ForegroundColor Yellow
          }
        }

        $artifactsList = $artifacts -join ","
        echo "artifacts_list=$artifactsList" >> $env:GITHUB_OUTPUT
        Write-Host "Artifacts collected: $($artifacts.Count)" -ForegroundColor Green

    - name: Create GitHub Release
      id: create-release
      uses: ncipollo/release-action@v1.18.0
      with:
        tag: v${{ inputs.version }}
        name: Bucket ${{ inputs.version }}
        prerelease: ${{ inputs.is-prerelease }}
        generateReleaseNotes: true
        artifacts: ${{ steps.collect-artifacts.outputs.artifacts_list }}
        token: ${{ secrets.github-token }}
        body: |
          ${{ inputs.release-notes }}${{ steps.calculate-hashes.outputs.files_table }}


    - name: Generate job summary
      shell: pwsh
      run: |
        Write-Host "=== Generating Job Summary ===" -ForegroundColor Cyan

        $summary = @"
        # ðŸš€ Release Published: Bucket ${{ inputs.version }}

        ## ðŸ“¦ Release Information
        - **Version**: ``${{ inputs.version }}``
        - **Type**: $(if ("${{ inputs.is-prerelease }}" -eq "true") { "Pre-release (Nightly)" } else { "Stable Release" })
        - **Release URL**: https://github.com/${{ github.repository }}/releases/tag/v${{ inputs.version }}

        ## ðŸ“‹ Artifacts

        ### MSI Installers (Available for Download)
        "@


        $installersPath = "${{ inputs.artifacts-path }}/installers"
        if (Test-Path $installersPath) {
          Get-ChildItem -Path $installersPath -Filter "*.msi" | ForEach-Object {
            $summary += "`n- ``$($_.Name)`` ($('{0:N2} MB' -f ($_.Length / 1MB)))"
          }
        }

        $summary += @"


        ## âœ… Release Complete
        All artifacts have been successfully uploaded to the GitHub release.
        "@

        $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8 -Append
        Write-Host "Job summary generated" -ForegroundColor Green
