name: 'ðŸ“¦ Subflow - Release Management'

on:
  workflow_call:
    inputs:
      version:
        description: 'Version for the release'
        required: true
        type: string
      is-prerelease:
        description: 'Whether this is a pre-release'
        required: false
        type: string
        default: 'false'
      release-notes:
        description: 'Release notes content'
        required: false
        type: string
        default: ''
      artifacts-path:
        description: 'Path to artifacts to upload'
        required: false
        type: string
        default: 'artifacts'
      checkout-ref:
        description: 'Git reference to checkout'
        required: false
        type: string
        default: ''
      target-branch:
        description: 'Target branch for generating release notes (main, dev, etc.)'
        required: false
        type: string
        default: 'main'
      commit-sha:
        description: 'Specific commit SHA to tag (optional, uses HEAD if not provided)'
        required: false
        type: string
        default: ''
    secrets:
      github-token:
        description: 'GitHub token for creating release'
        required: true
    outputs:
      release-url:
        description: 'URL of the created release'
        value: ${{ jobs.release-management.outputs.release-url }}
      release-id:
        description: 'ID of the created release'
        value: ${{ jobs.release-management.outputs.release-id }}

jobs:
  release-management:
    name: Release Management
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      pull-requests: write
    outputs:
      release-url: ${{ steps.create-release.outputs.url }}
      release-id: ${{ steps.create-release.outputs.id }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ inputs.checkout-ref || github.ref }}
        fetch-depth: 0  # Fetch full history including tags

    - name: Setup GitHub CLI
      run: |
        echo "${{ secrets.github-token }}" | gh auth login --with-token
      shell: bash

    - name: Download build artifacts (includes installers)
      uses: actions/download-artifact@v5
      with:
        name: build-artifacts
        path: ${{ inputs.artifacts-path }}/


    - name: Calculate file hashes and generate body
      id: calculate-hashes
      shell: pwsh
      run: |
        Write-Host "=== Calculating File Hashes and Generating Body ===" -ForegroundColor Cyan

        $version = "${{ inputs.version }}"
        $repository = "${{ github.repository }}"

        # Start building the table
        $tableRows = @()

        # Process MSI files
        $installersPath = "${{ inputs.artifacts-path }}/installers"
        if (Test-Path $installersPath) {
          Get-ChildItem -Path $installersPath -Filter "*.msi" | Sort-Object Name | ForEach-Object {
            $hash = (Get-FileHash $_.FullName -Algorithm SHA256).Hash
            Write-Host "MSI: $($_.Name) = $hash" -ForegroundColor Yellow

            $fileName = $_.Name
            $downloadUrl = "https://github.com/$repository/releases/download/v$version/$fileName"
            $badgeUrl = "https://img.shields.io/github/downloads/$repository/v$version/$fileName"

            $tableRows += "|[$fileName]($downloadUrl)|``$hash``|<picture>![$fileName]($badgeUrl`?style=flat-square&label=&color=blue)</picture>|"
          }
        }


        # Create the complete table
        $filesTable = @"
        ## Files
        |Files|Hash (SHA256)|Downloads|
        |---|---|---|
        $($tableRows -join "`n")
        "@

        # Save the table to output
        $filesTable | Out-File -FilePath "files-table.md" -Encoding UTF8

        # Use proper multiline output format for GitHub Actions
        Add-Content -Path $env:GITHUB_OUTPUT -Value "files_table<<EOF"
        Add-Content -Path $env:GITHUB_OUTPUT -Value $filesTable
        Add-Content -Path $env:GITHUB_OUTPUT -Value "EOF"

        Write-Host "File hashes calculated and table generated" -ForegroundColor Green

    - name: Collect artifacts for upload
      id: collect-artifacts
      shell: pwsh
      run: |
        Write-Host "=== Collecting Artifacts ===" -ForegroundColor Cyan

        $artifacts = @()


        # Collect MSI files
        $installersPath = "${{ inputs.artifacts-path }}/installers"
        if (Test-Path $installersPath) {
          Get-ChildItem -Path $installersPath -Filter "*.msi" | ForEach-Object {
            $artifacts += $_.FullName
            Write-Host "Added MSI: $($_.Name)" -ForegroundColor Yellow
          }
        }

        $artifactsList = $artifacts -join ","
        echo "artifacts_list=$artifactsList" >> $env:GITHUB_OUTPUT
        Write-Host "Artifacts collected: $($artifacts.Count)" -ForegroundColor Green

    - name: Determine commit SHA
      id: get-commit
      shell: bash
      run: |
        if [ -n "${{ inputs.commit-sha }}" ]; then
          COMMIT_SHA="${{ inputs.commit-sha }}"
          echo "Using provided commit SHA: $COMMIT_SHA"
        else
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "Using current HEAD commit: $COMMIT_SHA"
        fi
        echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        echo "Tagging commit: $COMMIT_SHA"

    - name: Generate release body
      id: generate-body
      shell: pwsh
      run: |
        Write-Host "=== Generating Release Body ===" -ForegroundColor Cyan

        # Choose the appropriate template
        if ("${{ inputs.is-prerelease }}" -eq "true") {
          $templatePath = ".github/workflows/nightly-body-template.md"
          Write-Host "Using nightly template: $templatePath" -ForegroundColor Yellow
        } else {
          $templatePath = ".github/workflows/release-body-template.md"
          Write-Host "Using release template: $templatePath" -ForegroundColor Yellow
        }

        # Read the template
        $template = Get-Content -Path $templatePath -Raw
        Write-Host "Template loaded successfully" -ForegroundColor Green

        # Replace placeholders
        $releaseNotes = "${{ inputs.release-notes }}"
        $filesTable = "${{ steps.calculate-hashes.outputs.files_table }}"

        # Handle release notes substitution
        if ([string]::IsNullOrEmpty($releaseNotes)) {
          # Remove the {RELEASE_NOTES} placeholder and extra newlines
          $body = $template -replace '\{RELEASE_NOTES\}\r?\n\r?\n', ''
          $body = $body -replace '\{RELEASE_NOTES\}', ''
        } else {
          $body = $template -replace '\{RELEASE_NOTES\}', $releaseNotes
        }

        # Replace files table placeholder
        $body = $body -replace '\{FILES_TABLE\}', $filesTable

        # Write the generated body to file
        $body | Out-File -FilePath "generated-release-body.md" -Encoding UTF8 -NoNewline
        Write-Host "Release body generated successfully" -ForegroundColor Green

    - name: Create GitHub Release
      id: create-release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ inputs.version }}
        name: Bucket ${{ inputs.version }}
        target_commitish: ${{ steps.get-commit.outputs.commit-sha }}
        prerelease: ${{ inputs.is-prerelease }}
        generate_release_notes: true
        files: ${{ steps.collect-artifacts.outputs.artifacts_list }}
        body_path: generated-release-body.md
      env:
        GITHUB_TOKEN: ${{ secrets.github-token }}


    - name: Generate job summary
      shell: pwsh
      run: |
        Write-Host "=== Generating Job Summary ===" -ForegroundColor Cyan

        $summary = @"
        # ðŸš€ Release Published: Bucket ${{ inputs.version }}

        ## ðŸ“¦ Release Information
        - **Version**: ``${{ inputs.version }}``
        - **Type**: $(if ("${{ inputs.is-prerelease }}" -eq "true") { "Pre-release (Nightly)" } else { "Stable Release" })
        - **Release URL**: https://github.com/${{ github.repository }}/releases/tag/v${{ inputs.version }}

        ## ðŸ“‹ Artifacts

        ### MSI Installers (Available for Download)
        "@


        $installersPath = "${{ inputs.artifacts-path }}/installers"
        if (Test-Path $installersPath) {
          Get-ChildItem -Path $installersPath -Filter "*.msi" | ForEach-Object {
            $summary += "`n- ``$($_.Name)`` ($('{0:N2} MB' -f ($_.Length / 1MB)))"
          }
        }

        $summary += @"


        ## âœ… Release Complete
        All artifacts have been successfully uploaded to the GitHub release.
        "@

        $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8 -Append
        Write-Host "Job summary generated" -ForegroundColor Green
