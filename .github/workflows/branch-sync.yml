name: 🔄 Branch Synchronization

# This workflow manages reverse synchronization between branches:
# - main -> dev -> feature branches
# - dev -> feature branches (when changes are made on dev)
# - Triggered by pull requests targeting dev branch
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - dev
    types:
      - closed
  workflow_dispatch:
    inputs:
      source_branch:
        description: 'Source branch to sync from'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - dev
      target_branches:
        description: 'Target branches (comma-separated, or "auto" for automatic detection)'
        required: true
        default: 'auto'
        type: string
      dry_run:
        description: 'Dry run mode (only show what would be synced)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  actions: read

# ============================================================================
# ENVIRONMENT CONFIGURATION
# ============================================================================
env:
  # Git Configuration
  GIT_USER_NAME: "github-actions[bot]"
  GIT_USER_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"

  # Sync Configuration
  PROTECTED_BRANCHES: "main,dev"  # Branches that won't be automatically synced to
  EXCLUDE_PATTERNS: "temp/*,hotfix/*,release/*"  # Branch patterns to exclude
  MAX_BRANCHES_PER_SYNC: 20  # Maximum number of branches to sync in one run

# ============================================================================
# JOBS PIPELINE
# ============================================================================
jobs:
  # ──────────────────────────────────────────────────────────────────────────
  # 🔍 BRANCH ANALYSIS JOB
  # ──────────────────────────────────────────────────────────────────────────
  analyze-branches:
    name: 🔍 Analyze Branches
    runs-on: ubuntu-latest
    outputs:
      source-branch: ${{ steps.analyze.outputs.source-branch }}
      target-branches: ${{ steps.analyze.outputs.target-branches }}
      sync-strategy: ${{ steps.analyze.outputs.sync-strategy }}
      changes-detected: ${{ steps.analyze.outputs.changes-detected }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Configure Git
        run: |
          git config user.name "${{ env.GIT_USER_NAME }}"
          git config user.email "${{ env.GIT_USER_EMAIL }}"

      - name: 🔍 Analyze Branch Structure and Changes
        id: analyze
        run: |
          echo "🔍 Analyzing branch synchronization requirements..."

          # Determine source branch based on event type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SOURCE_BRANCH="${{ github.event.inputs.source_branch }}"
            echo "📌 Manual trigger: Using source branch '$SOURCE_BRANCH'"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For pull requests, we sync from the head branch to feature branches
            SOURCE_BRANCH="${{ github.head_ref }}"
            echo "📌 Pull request trigger: Using head branch '$SOURCE_BRANCH'"

            # Only process if PR is targeting dev and has been merged
            if [[ "${{ github.base_ref }}" != "dev" ]]; then
              echo "⏭️ Pull request not targeting dev branch, skipping sync"
              echo "source-branch=" >> $GITHUB_OUTPUT
              echo "sync-strategy=none" >> $GITHUB_OUTPUT
              echo "target-branches=" >> $GITHUB_OUTPUT
              echo "changes-detected=false" >> $GITHUB_OUTPUT
              exit 0
            fi

            # Only sync when PR is actually merged
            if [[ "${{ github.event.pull_request.merged }}" != "true" ]]; then
              echo "⏭️ Pull request was closed but not merged, skipping sync"
              echo "source-branch=" >> $GITHUB_OUTPUT
              echo "sync-strategy=none" >> $GITHUB_OUTPUT
              echo "target-branches=" >> $GITHUB_OUTPUT
              echo "changes-detected=false" >> $GITHUB_OUTPUT
              exit 0
            fi

            echo "✅ Pull request was merged, proceeding with synchronization"
          else
            SOURCE_BRANCH="${{ github.ref_name }}"
            echo "📌 Push trigger: Using pushed branch '$SOURCE_BRANCH'"
          fi

          echo "source-branch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT

          # Determine sync strategy based on source branch and event type
          case "$SOURCE_BRANCH" in
            "main")
              SYNC_STRATEGY="main-to-all"
              echo "🎯 Strategy: main -> dev -> feature branches"
              ;;
            "dev")
              SYNC_STRATEGY="dev-to-features"
              echo "🎯 Strategy: dev -> feature branches only"
              ;;
            *)
              # For pull requests or feature branches, sync to other feature branches
              if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.base_ref }}" == "dev" ]]; then
                SYNC_STRATEGY="feature-to-features"
                echo "🎯 Strategy: feature branch -> other feature branches (PR to dev)"
              else
                SYNC_STRATEGY="none"
                echo "⏭️  No sync strategy for branch '$SOURCE_BRANCH'"
                echo "sync-strategy=$SYNC_STRATEGY" >> $GITHUB_OUTPUT
                echo "target-branches=" >> $GITHUB_OUTPUT
                echo "changes-detected=false" >> $GITHUB_OUTPUT
                exit 0
              fi
              ;;
          esac

          echo "sync-strategy=$SYNC_STRATEGY" >> $GITHUB_OUTPUT

          # Get all remote branches
          git fetch --all
          ALL_BRANCHES=$(git branch -r | grep -v HEAD | sed 's/origin\///' | sort)

          # Determine target branches
          TARGET_BRANCHES=""

          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.target_branches }}" != "auto" ]]; then
            # Manual selection
            TARGET_BRANCHES="${{ github.event.inputs.target_branches }}"
            echo "📌 Manual target selection: $TARGET_BRANCHES"
          else
            # Automatic detection based on strategy
            case "$SYNC_STRATEGY" in
              "main-to-all")
                # main -> dev first, then all feature branches
                if echo "$ALL_BRANCHES" | grep -q "^dev$"; then
                  TARGET_BRANCHES="dev"
                fi

                # Add feature branches (exclude protected branches and patterns)
                FEATURE_BRANCHES=$(echo "$ALL_BRANCHES" | grep -vE "^($(echo $PROTECTED_BRANCHES | tr ',' '|'))$" | grep -vE "$(echo $EXCLUDE_PATTERNS | tr ',' '|')")
                if [[ -n "$FEATURE_BRANCHES" ]]; then
                  if [[ -n "$TARGET_BRANCHES" ]]; then
                    TARGET_BRANCHES="$TARGET_BRANCHES,$FEATURE_BRANCHES"
                  else
                    TARGET_BRANCHES="$FEATURE_BRANCHES"
                  fi
                fi
                ;;
              "dev-to-features")
                # dev -> feature branches only
                TARGET_BRANCHES=$(echo "$ALL_BRANCHES" | grep -vE "^($(echo $PROTECTED_BRANCHES | tr ',' '|'))$" | grep -vE "$(echo $EXCLUDE_PATTERNS | tr ',' '|')")
                ;;
              "feature-to-features")
                # feature branch -> other feature branches (excluding source branch)
                TARGET_BRANCHES=$(echo "$ALL_BRANCHES" | grep -vE "^($(echo $PROTECTED_BRANCHES | tr ',' '|')|$SOURCE_BRANCH)$" | grep -vE "$(echo $EXCLUDE_PATTERNS | tr ',' '|')")
                ;;
            esac
          fi

          # Clean up target branches list
          TARGET_BRANCHES=$(echo "$TARGET_BRANCHES" | tr ',' '\n' | sort | uniq | tr '\n' ',' | sed 's/,$//')

          if [[ -z "$TARGET_BRANCHES" ]]; then
            echo "⏭️  No target branches identified for synchronization"
            echo "target-branches=" >> $GITHUB_OUTPUT
            echo "changes-detected=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "target-branches=$TARGET_BRANCHES" >> $GITHUB_OUTPUT

          # Check if there are actual changes to sync
          CHANGES_DETECTED="false"

          # Convert comma-separated list to array
          IFS=',' read -ra BRANCH_ARRAY <<< "$TARGET_BRANCHES"

          for TARGET_BRANCH in "${BRANCH_ARRAY[@]}"; do
            TARGET_BRANCH=$(echo "$TARGET_BRANCH" | xargs)  # Trim whitespace

            if [[ -z "$TARGET_BRANCH" ]]; then
              continue
            fi

            echo "🔍 Checking changes from '$SOURCE_BRANCH' to '$TARGET_BRANCH'..."

            # Check if target branch exists
            if ! git rev-parse --verify "origin/$TARGET_BRANCH" >/dev/null 2>&1; then
              echo "⚠️  Branch '$TARGET_BRANCH' does not exist"
              continue
            fi

            # Count commits that are in source but not in target
            COMMITS_AHEAD=$(git rev-list --count "origin/$TARGET_BRANCH..origin/$SOURCE_BRANCH" 2>/dev/null || echo "0")

            if [[ "$COMMITS_AHEAD" -gt 0 ]]; then
              echo "📊 Found $COMMITS_AHEAD commits to sync from '$SOURCE_BRANCH' to '$TARGET_BRANCH'"
              CHANGES_DETECTED="true"
            else
              echo "✅ Branch '$TARGET_BRANCH' is up to date with '$SOURCE_BRANCH'"
            fi
          done

          echo "changes-detected=$CHANGES_DETECTED" >> $GITHUB_OUTPUT

          # Summary
          echo ""
          echo "📋 Analysis Summary:"
          echo "  • Source Branch: $SOURCE_BRANCH"
          echo "  • Sync Strategy: $SYNC_STRATEGY"
          echo "  • Target Branches: $TARGET_BRANCHES"
          echo "  • Changes Detected: $CHANGES_DETECTED"

  # ──────────────────────────────────────────────────────────────────────────
  # 🔄 SYNCHRONIZATION JOB
  # ──────────────────────────────────────────────────────────────────────────
  prepare-sync-matrix:
    name: 🔄 Prepare Sync Matrix
    runs-on: ubuntu-latest
    needs: analyze-branches
    if: needs.analyze-branches.outputs.changes-detected == 'true'
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}

    steps:
      - name: 📋 Prepare Matrix
        id: matrix
        run: |
          TARGET_BRANCHES="${{ needs.analyze-branches.outputs.target-branches }}"

          if [[ -z "$TARGET_BRANCHES" ]]; then
            echo "matrix={\"target_branch\":[]}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Convert comma-separated string to JSON array
          MATRIX_JSON="{"
          MATRIX_JSON+='"target_branch":['

          IFS=',' read -ra BRANCH_ARRAY <<< "$TARGET_BRANCHES"
          FIRST=true

          for BRANCH in "${BRANCH_ARRAY[@]}"; do
            BRANCH=$(echo "$BRANCH" | xargs)  # Trim whitespace
            if [[ -n "$BRANCH" ]]; then
              if [[ "$FIRST" == "false" ]]; then
                MATRIX_JSON+=","
              fi
              MATRIX_JSON+="\"$BRANCH\""
              FIRST=false
            fi
          done

          MATRIX_JSON+="]}"

          echo "Matrix JSON: $MATRIX_JSON"
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  synchronize-branches:
    name: 🔄 Sync (${{ matrix.target_branch }})
    runs-on: ubuntu-latest
    needs: [analyze-branches, prepare-sync-matrix]
    if: needs.analyze-branches.outputs.changes-detected == 'true'

    strategy:
      fail-fast: false
      max-parallel: 5
      matrix: ${{ fromJson(needs.prepare-sync-matrix.outputs.matrix) }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Configure Git
        run: |
          git config user.name "${{ env.GIT_USER_NAME }}"
          git config user.email "${{ env.GIT_USER_EMAIL }}"

      - name: 🔄 Synchronize Branch
        id: sync
        run: |
          SOURCE_BRANCH="${{ needs.analyze-branches.outputs.source-branch }}"
          TARGET_BRANCH="${{ matrix.target_branch }}"
          DRY_RUN="${{ github.event.inputs.dry_run || 'false' }}"

          echo "🔄 Synchronizing '$SOURCE_BRANCH' -> '$TARGET_BRANCH'"

          # Ensure we have the latest changes
          git fetch --all

          # Verify branches exist
          if ! git rev-parse --verify "origin/$SOURCE_BRANCH" >/dev/null 2>&1; then
            echo "❌ Source branch '$SOURCE_BRANCH' does not exist"
            exit 1
          fi

          if ! git rev-parse --verify "origin/$TARGET_BRANCH" >/dev/null 2>&1; then
            echo "❌ Target branch '$TARGET_BRANCH' does not exist"
            exit 1
          fi

          # Check if sync is needed
          COMMITS_AHEAD=$(git rev-list --count "origin/$TARGET_BRANCH..origin/$SOURCE_BRANCH" 2>/dev/null || echo "0")

          if [[ "$COMMITS_AHEAD" -eq 0 ]]; then
            echo "✅ Branch '$TARGET_BRANCH' is already up to date with '$SOURCE_BRANCH'"
            echo "sync-result=up-to-date" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "📊 Found $COMMITS_AHEAD commits to sync"

          # Show what commits will be synced
          echo "📝 Commits to be synced:"
          git log --oneline --max-count=10 "origin/$TARGET_BRANCH..origin/$SOURCE_BRANCH"

          if [[ "$COMMITS_AHEAD" -gt 10 ]]; then
            echo "... and $(($COMMITS_AHEAD - 10)) more commits"
          fi

          if [[ "$DRY_RUN" == "true" ]]; then
            echo "🧪 DRY RUN: Would sync $COMMITS_AHEAD commits from '$SOURCE_BRANCH' to '$TARGET_BRANCH'"
            echo "sync-result=dry-run-success" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Perform the actual sync
          echo "🔄 Performing synchronization..."

          # Checkout target branch
          git checkout -B "$TARGET_BRANCH" "origin/$TARGET_BRANCH"

          # Attempt to merge source branch
          if git merge "origin/$SOURCE_BRANCH" --no-ff -m "🔄 Auto-sync from $SOURCE_BRANCH

          This is an automated synchronization from the $SOURCE_BRANCH branch.

          Commits synced: $COMMITS_AHEAD
          Triggered by: ${{ github.actor }}
          Workflow: ${{ github.workflow }}
          Run: ${{ github.run_number }}"; then

            echo "✅ Merge successful"

            # Push the changes
            if git push origin "$TARGET_BRANCH"; then
              echo "✅ Successfully pushed changes to '$TARGET_BRANCH'"
              echo "sync-result=success" >> $GITHUB_OUTPUT
            else
              echo "❌ Failed to push changes to '$TARGET_BRANCH'"
              echo "sync-result=push-failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "❌ Merge conflict detected"
            echo "🔧 Creating pull request for manual resolution..."

            # Reset to clean state
            git merge --abort

            # Create a sync branch
            SYNC_BRANCH="auto-sync/$SOURCE_BRANCH-to-$TARGET_BRANCH-$(date +%Y%m%d-%H%M%S)"
            git checkout -b "$SYNC_BRANCH" "origin/$SOURCE_BRANCH"

            # Push sync branch
            git push origin "$SYNC_BRANCH"

            # Create PR for manual resolution
            PR_TITLE="🔄 Auto-sync: $SOURCE_BRANCH → $TARGET_BRANCH (Conflicts)"
            PR_BODY="## 🔄 Automated Branch Synchronization

            **Source Branch:** \`$SOURCE_BRANCH\`
            **Target Branch:** \`$TARGET_BRANCH\`
            **Conflicts:** ⚠️ Manual resolution required

            ### 📊 Sync Details
            - **Commits to sync:** $COMMITS_AHEAD
            - **Triggered by:** ${{ github.actor }}
            - **Workflow:** ${{ github.workflow }}
            - **Run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### 🛠️ Manual Steps Required
            1. Review the conflicts in this PR
            2. Resolve conflicts manually
            3. Merge this PR to complete the synchronization

            ### 📝 Commits being synced:
            \`\`\`
            $(git log --oneline --max-count=10 "origin/$TARGET_BRANCH..origin/$SOURCE_BRANCH")
            \`\`\`

            ---
            *This PR was automatically created by the branch synchronization workflow.*"

            # Create PR using GitHub CLI
            if command -v gh >/dev/null 2>&1; then
              gh pr create \
                --title "$PR_TITLE" \
                --body "$PR_BODY" \
                --base "$TARGET_BRANCH" \
                --head "$SYNC_BRANCH" \
                --label "automated-sync,conflicts"

              echo "✅ Created PR for manual conflict resolution"
              echo "sync-result=conflict-pr-created" >> $GITHUB_OUTPUT
            else
              echo "❌ GitHub CLI not available, cannot create PR"
              echo "sync-result=conflict-no-pr" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ──────────────────────────────────────────────────────────────────────────
  # 📊 SYNCHRONIZATION SUMMARY JOB
  # ──────────────────────────────────────────────────────────────────────────
  sync-summary:
    name: 📊 Sync Summary
    runs-on: ubuntu-latest
    needs: [analyze-branches, prepare-sync-matrix, synchronize-branches]
    if: always()

    steps:
      - name: 📊 Generate Synchronization Summary
        run: |
          echo "# 🔄 Branch Synchronization Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Generated on $(date +'%Y-%m-%d at %H:%M:%S UTC')*" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Analysis Results
          echo "## 🔍 Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Source Branch**: \`${{ needs.analyze-branches.outputs.source-branch }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Sync Strategy**: ${{ needs.analyze-branches.outputs.sync-strategy }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Branches**: ${{ needs.analyze-branches.outputs.target-branches }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes Detected**: ${{ needs.analyze-branches.outputs.changes-detected }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Synchronization Results
          if [[ "${{ needs.analyze-branches.outputs.changes-detected }}" == "true" ]]; then
            echo "## 🔄 Synchronization Results" >> $GITHUB_STEP_SUMMARY
            echo "| Target Branch | Status | Result |" >> $GITHUB_STEP_SUMMARY
            echo "|---------------|--------|--------|" >> $GITHUB_STEP_SUMMARY

            # This would need to be populated with actual results from the matrix job
            # For now, we'll show a general status
            if [[ "${{ needs.synchronize-branches.result }}" == "success" ]]; then
              echo "| All Branches | ✅ Success | Synchronized successfully |" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.synchronize-branches.result }}" == "failure" ]]; then
              echo "| Some Branches | ❌ Failed | Check individual job logs |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Branches | ⏭️ Skipped | No changes or errors |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ⏭️ No Synchronization Needed" >> $GITHUB_STEP_SUMMARY
            echo "All target branches are up to date with the source branch." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Configuration
          echo "## ⚙️ Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Protected Branches**: ${{ env.PROTECTED_BRANCHES }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Exclude Patterns**: ${{ env.EXCLUDE_PATTERNS }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Max Branches Per Sync**: ${{ env.MAX_BRANCHES_PER_SYNC }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ github.event.inputs.dry_run || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # How it Works
          echo "## 🔧 How It Works" >> $GITHUB_STEP_SUMMARY
          echo "This workflow provides automated reverse synchronization:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Automatic Triggers" >> $GITHUB_STEP_SUMMARY
          echo "- **Push to \`main\`**: Syncs to \`dev\` and all feature branches" >> $GITHUB_STEP_SUMMARY
          echo "- **Push to \`dev\`**: Syncs to all feature branches only" >> $GITHUB_STEP_SUMMARY
          echo "- **Pull Request to \`dev\`**: Syncs from PR head branch to other feature branches" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Manual Control" >> $GITHUB_STEP_SUMMARY
          echo "- Use \`workflow_dispatch\` for custom source/target combinations" >> $GITHUB_STEP_SUMMARY
          echo "- Dry run mode to preview changes without applying them" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Conflict Resolution" >> $GITHUB_STEP_SUMMARY
          echo "- Automatic merge when no conflicts exist" >> $GITHUB_STEP_SUMMARY
          echo "- Creates PR for manual resolution when conflicts are detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*🤖 Automated Branch Synchronization - Keep Your Branches in Sync*" >> $GITHUB_STEP_SUMMARY
