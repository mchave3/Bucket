name: C# Code Quality

on:
  push:
    branches: [ main, dev ]
    paths:
      - '**.cs'
      - '**.csproj'
      - '**.sln'
      - '.editorconfig'
      - '.github/workflows/csharp-linter.yml'
  pull_request:
    branches: [ main, dev ]
    paths:
      - '**.cs'
      - '**.csproj'
      - '**.sln'
      - '.editorconfig'
  workflow_dispatch:

jobs:
  analyze:
    name: Code Analysis
    runs-on: windows-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore Bucket.sln

      - name: Install code analysis tools
        run: |
          dotnet tool install -g dotnet-format
          dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Run dotnet format (check)
        id: format-check
        continue-on-error: true
        run: |
          dotnet format Bucket.sln --verify-no-changes --verbosity diagnostic

      - name: Build solution
        shell: pwsh
        run: |
          Write-Host "Building solution for x64 platform..." -ForegroundColor Cyan
          msbuild Bucket.sln `
            /p:Configuration=Release `
            /p:Platform=x64 `
            /p:RestorePackages=false `
            /p:TreatWarningsAsErrors=true `
            /t:Build `
            /m `
            /v:minimal

          if ($LASTEXITCODE -ne 0) {
            Write-Error "Build failed!"
            exit 1
          }

      - name: Run code analysis
        id: analysis
        shell: pwsh
        run: |
          Write-Host "=== Running Code Analysis ===" -ForegroundColor Cyan

          # Create results directory
          $resultsDir = "analysis-results"
          New-Item -ItemType Directory -Force -Path $resultsDir | Out-Null

          # Run Roslyn analyzers
          msbuild Bucket.sln `
            /p:Configuration=Release `
            /p:Platform=x64 `
            /p:RestorePackages=false `
            /p:EnforceCodeStyleInBuild=true `
            /p:AnalysisLevel=latest `
            /p:TreatWarningsAsErrors=false `
            /p:WarningsAsErrors="" `
            /warnAsMessage:CS1591 `
            /flp:"LogFile=$resultsDir/build.log;Verbosity=detailed" `
            /t:Build

          # Parse warnings and errors
          $buildLog = Get-Content "$resultsDir/build.log" -ErrorAction SilentlyContinue
          $warnings = $buildLog | Select-String -Pattern "warning \w+:" -AllMatches
          $errors = $buildLog | Select-String -Pattern "error \w+:" -AllMatches

          Write-Host "Warnings found: $($warnings.Count)" -ForegroundColor Yellow
          Write-Host "Errors found: $($errors.Count)" -ForegroundColor Red

          # Set outputs
          echo "warnings=$($warnings.Count)" >> $env:GITHUB_OUTPUT
          echo "errors=$($errors.Count)" >> $env:GITHUB_OUTPUT

      - name: Run security scan
        continue-on-error: true
        run: |
          dotnet list package --vulnerable --include-transitive

      - name: Generate report
        if: always()
        shell: pwsh
        run: |
          $summary = @"
          # üìä Code Quality Report

          ## Analysis Results
          "@

          # Format check results
          if ("${{ steps.format-check.outcome }}" -eq "success") {
            $summary += "`n- ‚úÖ **Code Formatting**: All files properly formatted"
          } else {
            $summary += "`n- ‚ö†Ô∏è **Code Formatting**: Issues found (run ``dotnet format`` to fix)"
          }

          # Build and analysis results
          $warnings = "${{ steps.analysis.outputs.warnings }}"
          $errors = "${{ steps.analysis.outputs.errors }}"

          if ($errors -eq "0") {
            $summary += "`n- ‚úÖ **Build Errors**: None"
          } else {
            $summary += "`n- ‚ùå **Build Errors**: $errors errors found"
          }

          if ($warnings -eq "0") {
            $summary += "`n- ‚úÖ **Build Warnings**: None"
          } else {
            $summary += "`n- ‚ö†Ô∏è **Build Warnings**: $warnings warnings found"
          }

          $summary += @"


          ## Projects Analyzed
          - Bucket.App
          - Bucket.Core
          - Bucket.App.Tests
          - Bucket.Core.Tests

          ## Analysis Configuration
          - **.NET Version**: 9.0
          - **Configuration**: Release
          - **Analysis Level**: Latest
          - **Code Style Enforcement**: Enabled
          "@

          # Add recommendations if issues found
          if ($errors -ne "0" -or $warnings -ne "0" -or "${{ steps.format-check.outcome }}" -ne "success") {
            $summary += @"


          ## üîß Recommendations
          "@

            if ("${{ steps.format-check.outcome }}" -ne "success") {
              $summary += @"

          ### Fix formatting issues:
          ``````bash
          dotnet format Bucket.sln
          ``````
          "@
            }

            if ($warnings -ne "0") {
              $summary += @"

          ### Review warnings:
          Check the build log for detailed warning information.
          "@
            }

            if ($errors -ne "0") {
              $summary += @"

          ### Fix build errors:
          Build errors must be resolved before merging.
          "@
            }
          }

          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8

          # Fail if errors found
          if ($errors -ne "0") {
            Write-Error "Build errors found! Please fix them before merging."
            exit 1
          }

      - name: Comment PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const warnings = '${{ steps.analysis.outputs.warnings }}' || '0';
            const errors = '${{ steps.analysis.outputs.errors }}' || '0';
            const formatOk = '${{ steps.format-check.outcome }}' === 'success';

            let status = '‚úÖ';
            let title = 'All checks passed!';

            if (errors !== '0') {
              status = '‚ùå';
              title = 'Build errors found';
            } else if (warnings !== '0' || !formatOk) {
              status = '‚ö†Ô∏è';
              title = 'Code quality issues found';
            }

            const body = `## ${status} Code Quality Check

            **${title}**

            | Check | Status | Count |
            |-------|--------|-------|
            | Build Errors | ${errors === '0' ? '‚úÖ' : '‚ùå'} | ${errors} |
            | Build Warnings | ${warnings === '0' ? '‚úÖ' : '‚ö†Ô∏è'} | ${warnings} |
            | Code Formatting | ${formatOk ? '‚úÖ' : '‚ö†Ô∏è'} | - |

            ${errors !== '0' || warnings !== '0' || !formatOk ? `
            ### üîß How to fix

            ${!formatOk ? '1. Run `dotnet format Bucket.sln` to fix formatting issues' : ''}
            ${warnings !== '0' ? '2. Review and fix build warnings' : ''}
            ${errors !== '0' ? '3. Fix build errors (see build log for details)' : ''}
            ` : ''}

            ---
            <sub>Generated by C# Code Quality workflow</sub>`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Code Quality Check')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
