# Script pour lister toutes les versions actuelles des packages NuGet
Write-Host "üì¶ Inventaire des packages NuGet du projet Bucket" -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Cyan
Write-Host ""

# Fonction pour extraire les packages d'un fichier csproj
function Get-PackagesFromProject {
    param([string]$ProjectPath)

    if (Test-Path $ProjectPath) {
        Write-Host "üîç Analyse de: $ProjectPath" -ForegroundColor Yellow
        [xml]$project = Get-Content $ProjectPath

        $packages = $project.Project.ItemGroup.PackageReference
        if ($packages) {
            foreach ($package in $packages) {
                if ($package.Include -and $package.Version) {
                    Write-Host "  ‚îú‚îÄ $($package.Include): $($package.Version)" -ForegroundColor Green
                }
            }
        } else {
            Write-Host "  ‚îî‚îÄ Aucun package NuGet trouv√©" -ForegroundColor Gray
        }
        Write-Host ""
    }
}

# Analyser tous les projets
$projects = @(
    "src\Bucket.App\Bucket.App.csproj",
    "src\Bucket.Core\Bucket.Core.csproj",
    "tests\Bucket.App.Tests\Bucket.App.Tests.csproj",
    "tests\Bucket.Core.Tests\Bucket.Core.Tests.csproj"
)

foreach ($project in $projects) {
    Get-PackagesFromProject $project
}

# V√©rifier les packages obsol√®tes si dotnet-outdated est install√©
Write-Host "üîÑ V√©rification des packages obsol√®tes..." -ForegroundColor Cyan
try {
    $outdatedCheck = dotnet outdated --output json 2>&1
    if ($LASTEXITCODE -eq 0) {
        $json = $outdatedCheck | ConvertFrom-Json
        $hasOutdated = $false

        foreach ($project in $json.Projects) {
            if ($project.TargetFrameworks) {
                foreach ($framework in $project.TargetFrameworks) {
                    if ($framework.Dependencies -and $framework.Dependencies.Count -gt 0) {
                        if (-not $hasOutdated) {
                            Write-Host "‚ö†Ô∏è  Packages obsol√®tes d√©tect√©s:" -ForegroundColor Red
                            $hasOutdated = $true
                        }
                        foreach ($dep in $framework.Dependencies) {
                            Write-Host "  ‚îú‚îÄ $($dep.Name): $($dep.ResolvedVersion) ‚Üí $($dep.LatestVersion)" -ForegroundColor Red
                        }
                    }
                }
            }
        }

        if (-not $hasOutdated) {
            Write-Host "‚úÖ Tous les packages sont √† jour !" -ForegroundColor Green
        }
    } else {
        Write-Host "‚ÑπÔ∏è  dotnet-outdated-tool n'est pas install√©" -ForegroundColor Yellow
        Write-Host "   Installez-le avec: dotnet tool install --global dotnet-outdated-tool" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification: $_" -ForegroundColor Red
}

Write-Host ""
Write-Host "üìä R√©sum√© g√©n√©r√© le $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor Cyan
