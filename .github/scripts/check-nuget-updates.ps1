param(
    [string]$OutputFile = "updates-summary.md"
)

# ExÃ©cuter dotnet outdated et capturer la sortie
Write-Host "VÃ©rification des packages NuGet obsolÃ¨tes..."
$outdatedResult = dotnet outdated --output json 2>&1

if ($LASTEXITCODE -ne 0) {
    Write-Host "Aucune mise Ã  jour nÃ©cessaire ou erreur lors de la vÃ©rification"
    echo "has-updates=false" >> $env:GITHUB_OUTPUT
    exit 0
}

try {
    $json = $outdatedResult | ConvertFrom-Json
    $hasUpdates = $false
    $updatesList = @()

    foreach ($project in $json.Projects) {
        if ($project.TargetFrameworks) {
            foreach ($framework in $project.TargetFrameworks) {
                if ($framework.Dependencies -and $framework.Dependencies.Count -gt 0) {
                    $hasUpdates = $true
                    foreach ($dep in $framework.Dependencies) {
                        $updatesList += "- **$($dep.Name)**: $($dep.ResolvedVersion) â†’ $($dep.LatestVersion) dans $($project.Name)"
                    }
                }
            }
        }
    }

    if ($hasUpdates) {
        echo "has-updates=true" >> $env:GITHUB_OUTPUT

        # CrÃ©er le rÃ©sumÃ© des mises Ã  jour
        $summaryContent = @"
# ðŸ“¦ Mises Ã  jour NuGet disponibles

Les packages suivants peuvent Ãªtre mis Ã  jour :

$($updatesList -join "`n")

## DÃ©tails de l'exÃ©cution

Cette mise Ã  jour automatique a Ã©tÃ© gÃ©nÃ©rÃ©e le $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') UTC.

Les tests ont Ã©tÃ© exÃ©cutÃ©s avec succÃ¨s aprÃ¨s la mise Ã  jour.

## Actions effectuÃ©es

1. âœ… VÃ©rification des packages obsolÃ¨tes
2. âœ… Mise Ã  jour des packages
3. âœ… Build de la solution
4. âœ… ExÃ©cution des tests
5. âœ… CrÃ©ation de cette Pull Request

Cette PR peut Ãªtre mergÃ©e en toute sÃ©curitÃ© si tous les checks passent au vert.
"@

        $summaryContent | Out-File -FilePath $OutputFile -Encoding UTF8
        Write-Host "Fichier de rÃ©sumÃ© crÃ©Ã©: $OutputFile"
        Write-Host "Packages Ã  mettre Ã  jour trouvÃ©s: $($updatesList.Count)"
    } else {
        echo "has-updates=false" >> $env:GITHUB_OUTPUT
        Write-Host "Tous les packages sont Ã  jour !"
    }
} catch {
    Write-Host "Erreur lors du parsing: $_"
    echo "has-updates=false" >> $env:GITHUB_OUTPUT
    exit 1
}
